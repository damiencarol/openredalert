# Makefile.in generated by automake 1.11.1 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/openredalert
pkgincludedir = $(includedir)/openredalert
pkglibdir = $(libdir)/openredalert
pkglibexecdir = $(libexecdir)/openredalert
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = openredalert$(EXEEXT)
subdir = .
DIST_COMMON = README $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(top_srcdir)/configure AUTHORS COPYING \
	ChangeLog INSTALL NEWS depcomp install-sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude/sdl.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_openredalert_OBJECTS = OpenRedAlert.$(OBJEXT) Logger.$(OBJEXT) \
	SoundEngine.$(OBJEXT) SoundError.$(OBJEXT) SoundFile.$(OBJEXT) \
	SoundUtils.$(OBJEXT) ActionEvent.$(OBJEXT) \
	ActionEventQueue.$(OBJEXT) Ai.$(OBJEXT) AiCommand.$(OBJEXT) \
	BarrelExplosionActionEvent.$(OBJEXT) \
	BAttackAnimEvent.$(OBJEXT) BExplodeAnimEvent.$(OBJEXT) \
	BQTimer.$(OBJEXT) BQueue.$(OBJEXT) \
	BRepairUnitAnimEvent.$(OBJEXT) BTurnAnimEvent.$(OBJEXT) \
	BuildAnimEvent.$(OBJEXT) BuildingAnimEvent.$(OBJEXT) \
	CncMap.$(OBJEXT) Comp.$(OBJEXT) DataLoader.$(OBJEXT) \
	Dispatcher.$(OBJEXT) DoorAnimEvent.$(OBJEXT) \
	ExplosionAnim.$(OBJEXT) FibHeapEntry.$(OBJEXT) Game.$(OBJEXT) \
	GameError.$(OBJEXT) GlobalClearTriggerAction.$(OBJEXT) \
	GlobalSetTriggerAction.$(OBJEXT) InfantryGroup.$(OBJEXT) \
	KeyComp.$(OBJEXT) L2Overlay.$(OBJEXT) LoadMapError.$(OBJEXT) \
	LoopAnimEvent.$(OBJEXT) MissionData.$(OBJEXT) \
	MissionMapsClass.$(OBJEXT) MissionTheater.$(OBJEXT) \
	MoneyCounter.$(OBJEXT) MoveAnimEvent.$(OBJEXT) \
	MultiPlayerMaps.$(OBJEXT) NoActionTriggerAction.$(OBJEXT) \
	Path.$(OBJEXT) Player.$(OBJEXT) PlayerPool.$(OBJEXT) \
	ProcAnimEvent.$(OBJEXT) Projectile.$(OBJEXT) \
	ProjectileAnim.$(OBJEXT) ProjectileData.$(OBJEXT) \
	ProjectileDataList.$(OBJEXT) RadarAnimEvent.$(OBJEXT) \
	RawTriggerAction.$(OBJEXT) RedAlertDataLoader.$(OBJEXT) \
	RefineAnimEvent.$(OBJEXT) RepairAnimEvent.$(OBJEXT) \
	SnowMissionTheater.$(OBJEXT) Structure.$(OBJEXT) \
	StructureType.$(OBJEXT) talkback.$(OBJEXT) \
	TextTriggerAction.$(OBJEXT) Trigger.$(OBJEXT) \
	TriggerAction.$(OBJEXT) TriggerManager.$(OBJEXT) \
	triggers.$(OBJEXT) TurnAnimEvent.$(OBJEXT) \
	UAttackAnimEvent.$(OBJEXT) UHarvestEvent.$(OBJEXT) \
	UInfiltrateAnimEvent.$(OBJEXT) Unit.$(OBJEXT) \
	unitandstructurepool.$(OBJEXT) UnitAnimEvent.$(OBJEXT) \
	UnitOrStructure.$(OBJEXT) UnitOrStructureType.$(OBJEXT) \
	UnitType.$(OBJEXT) URepairEvent.$(OBJEXT) \
	WalkAnimEvent.$(OBJEXT) Warhead.$(OBJEXT) \
	WarheadData.$(OBJEXT) WarheadDataList.$(OBJEXT) \
	Weapon.$(OBJEXT) WeaponData.$(OBJEXT) WeaponDataList.$(OBJEXT) \
	weaponspool.$(OBJEXT) args.$(OBJEXT) common.$(OBJEXT) \
	Compression.$(OBJEXT) fibheap.$(OBJEXT) INIFile.$(OBJEXT) \
	KeyNotFound.$(OBJEXT) StringTableFile.$(OBJEXT) \
	Button.$(OBJEXT) Cursor.$(OBJEXT) CursorInfo.$(OBJEXT) \
	CursorPool.$(OBJEXT) DropDownListBox.$(OBJEXT) Font.$(OBJEXT) \
	FontCache.$(OBJEXT) Input.$(OBJEXT) ListboxClass.$(OBJEXT) \
	MapAnimationMenu.$(OBJEXT) Menu.$(OBJEXT) PauseMenu.$(OBJEXT) \
	RaWindow.$(OBJEXT) RA_Label.$(OBJEXT) RA_ProgressBar.$(OBJEXT) \
	selection.$(OBJEXT) sidebar.$(OBJEXT) SidebarButton.$(OBJEXT) \
	SidebarError.$(OBJEXT) TCheckBox.$(OBJEXT) TTextBox.$(OBJEXT) \
	externalvfs.$(OBJEXT) blowfish.$(OBJEXT) mixvfs.$(OBJEXT) \
	ws-key.$(OBJEXT) VFile.$(OBJEXT) vfs.$(OBJEXT) \
	CPSImage.$(OBJEXT) Dune2Image.$(OBJEXT) \
	GraphicsEngine.$(OBJEXT) imagecache.$(OBJEXT) \
	ImageCacheEntry.$(OBJEXT) ImageNotFound.$(OBJEXT) \
	imageproc.$(OBJEXT) loadingscreen.$(OBJEXT) message.$(OBJEXT) \
	MessagePool.$(OBJEXT) PCXImage.$(OBJEXT) Renderer.$(OBJEXT) \
	sdllayer.$(OBJEXT) SHPBase.$(OBJEXT) SHPImage.$(OBJEXT) \
	TemplateImage.$(OBJEXT) VideoError.$(OBJEXT) \
	VQAMovie.$(OBJEXT) WSAError.$(OBJEXT) WSAMovie.$(OBJEXT)
openredalert_OBJECTS = $(am_openredalert_OBJECTS)
am__DEPENDENCIES_1 =
openredalert_DEPENDENCIES = $(am__DEPENDENCIES_1)
openredalert_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(openredalert_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(openredalert_SOURCES)
DIST_SOURCES = $(openredalert_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d "$(distdir)" \
    || { find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr "$(distdir)"; }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /home/crazy/Documents/openredalert/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/crazy/Documents/openredalert/missing --run tar
AUTOCONF = ${SHELL} /home/crazy/Documents/openredalert/missing --run autoconf
AUTOHEADER = ${SHELL} /home/crazy/Documents/openredalert/missing --run autoheader
AUTOMAKE = ${SHELL} /home/crazy/Documents/openredalert/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"openredalert\" -DPACKAGE_TARNAME=\"openredalert\" -DPACKAGE_VERSION=\"0.1\" -DPACKAGE_STRING=\"openredalert\ 0.1\" -DPACKAGE_BUGREPORT=\"damien.carol@gmail.com\" -DPACKAGE_URL=\"\" -DPACKAGE=\"openredalert\" -DVERSION=\"0.1\" -DHAVE_LIBSDL_MIXER=1
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EXEEXT = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lSDL_mixer 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/crazy/Documents/openredalert/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = openredalert
PACKAGE_BUGREPORT = damien.carol@gmail.com
PACKAGE_NAME = openredalert
PACKAGE_STRING = openredalert 0.1
PACKAGE_TARNAME = openredalert
PACKAGE_URL = 
PACKAGE_VERSION = 0.1
PATH_SEPARATOR = :
SDL_CFLAGS = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib -lSDL
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 0.1
abs_builddir = /home/crazy/Documents/openredalert
abs_srcdir = /home/crazy/Documents/openredalert
abs_top_builddir = /home/crazy/Documents/openredalert
abs_top_srcdir = /home/crazy/Documents/openredalert
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/crazy/Documents/openredalert/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = 
top_builddir = .
top_srcdir = .
openredalert_SOURCES = \
    src/OpenRedAlert.cpp \
    src/Logger.cpp \
    src/Logger.hpp \
    src/audio/SoundBuffer.h \
    src/audio/SoundCache.h \
    src/audio/SoundCacheCleaner.hpp \
    src/audio/SoundCommon.h \
    src/audio/SoundEngine.cpp \
    src/audio/SoundEngine.h \
    src/audio/SoundError.cpp \
    src/audio/SoundError.h \
    src/audio/SoundFile.cpp \
    src/audio/SoundFile.h \
    src/audio/SoundUtils.cpp \
    src/audio/SoundUtils.h \
    src/audio/SOUND_DECODE_STATE.h \
    src/game/ActionEvent.cpp \
    src/game/ActionEvent.h \
    src/game/ActionEventQueue.cpp \
    src/game/ActionEventQueue.h \
    src/game/Ai.cpp \
    src/game/Ai.h \
    src/game/AiCommand.cpp \
    src/game/AiCommand.h \
    src/game/AiRules.h \
    src/game/animinfo_t.h \
    src/game/anim_nfo.h \
    src/game/armour_t.h \
    src/game/BarrelExplosionActionEvent.cpp \
    src/game/BarrelExplosionActionEvent.h \
    src/game/BAttackAnimEvent.cpp \
    src/game/BAttackAnimEvent.h \
    src/game/BExplodeAnimEvent.cpp \
    src/game/BExplodeAnimEvent.h \
    src/game/BQTimer.cpp \
    src/game/BQTimer.h \
    src/game/BQueue.cpp \
    src/game/BQueue.h \
    src/game/BRepairUnitAnimEvent.cpp \
    src/game/BRepairUnitAnimEvent.h \
    src/game/BTurnAnimEvent.cpp \
    src/game/BTurnAnimEvent.h \
    src/game/BuildAnimEvent.cpp \
    src/game/BuildAnimEvent.h \
    src/game/BuildingAnimEvent.cpp \
    src/game/BuildingAnimEvent.h \
    src/game/CellTrigger.h \
    src/game/CncMap.cpp \
    src/game/CnCMap.h \
    src/game/Comp.cpp \
    src/game/Comp.h \
    src/game/ConStatus.h \
    src/game/DataLoader.cpp \
    src/game/DataLoader.h \
    src/game/Dispatcher.cpp \
    src/game/Dispatcher.h \
    src/game/DispatchLogState.h \
    src/game/DoorAnimEvent.cpp \
    src/game/DoorAnimEvent.h \
    src/game/ExplosionAnim.cpp \
    src/game/ExplosionAnim.h \
    src/game/FibHeapEntry.cpp \
    src/game/FibHeapEntry.h \
    src/game/Game.cpp \
    src/game/Game.h \
    src/game/GameError.cpp \
    src/game/GameError.h \
    src/game/GameMode.h \
    src/game/GlobalClearTriggerAction.cpp \
    src/game/GlobalClearTriggerAction.h \
    src/game/GlobalSetTriggerAction.cpp \
    src/game/GlobalSetTriggerAction.h \
    src/game/InfantryGroup.cpp \
    src/game/InfantryGroup.h \
    src/game/KeyComp.cpp \
    src/game/KeyComp.h \
    src/game/L2Overlay.cpp \
    src/game/L2Overlay.h \
    src/game/LoadMapError.cpp \
    src/game/LoadMapError.h \
    src/game/LOADSTATE.h \
    src/game/LoopAnimEvent.cpp \
    src/game/LoopAnimEvent.h \
    src/game/MiniMapClipping.h \
    src/game/MissionData.cpp \
    src/game/MissionData.h \
    src/game/MissionMapsClass.cpp \
    src/game/MissionMapsClass.h \
    src/game/MissionTheater.cpp \
    src/game/MissionTheater.h \
    src/game/MoneyCounter.cpp \
    src/game/MoneyCounter.h \
    src/game/MoveAnimEvent.cpp \
    src/game/MoveAnimEvent.h \
    src/game/movement.h \
    src/game/MultiPlayerMaps.cpp \
    src/game/MultiPlayerMaps.h \
    src/game/NoActionTriggerAction.cpp \
    src/game/NoActionTriggerAction.h \
    src/game/Path.cpp \
    src/game/Path.h \
    src/game/Player.cpp \
    src/game/Player.h \
    src/game/PlayerPool.cpp \
    src/game/PlayerPool.h \
    src/game/PowerInfo.h \
    src/game/ProcAnimEvent.cpp \
    src/game/ProcAnimEvent.h \
    src/game/Production.h \
    src/game/Projectile.cpp \
    src/game/Projectile.h \
    src/game/ProjectileAnim.cpp \
    src/game/ProjectileAnim.h \
    src/game/ProjectileData.cpp \
    src/game/ProjectileData.h \
    src/game/ProjectileDataList.cpp \
    src/game/ProjectileDataList.h \
    src/game/pside.h \
    src/game/Queue.h \
    src/game/RadarAnimEvent.cpp \
    src/game/RadarAnimEvent.h \
    src/game/RawTriggerAction.cpp \
    src/game/RawTriggerAction.h \
    src/game/RA_Tigger.h \
    src/game/RedAlertDataLoader.cpp \
    src/game/RedAlertDataLoader.h \
    src/game/RefineAnimEvent.cpp \
    src/game/RefineAnimEvent.h \
    src/game/RepairAnimEvent.cpp \
    src/game/RepairAnimEvent.h \
    src/game/RQstate.h \
    src/game/SnowMissionTheater.cpp \
    src/game/SnowMissionTheater.h \
    src/game/Structure.cpp \
    src/game/Structure.h \
    src/game/StructureType.cpp \
    src/game/StructureType.h \
    src/game/talkback.cpp \
    src/game/Talkback.h \
    src/game/TalkbackType.h \
    src/game/TextTriggerAction.cpp \
    src/game/TextTriggerAction.h \
    src/game/TileRef.h \
    src/game/Trigger.cpp \
    src/game/Trigger.hpp \
    src/game/TriggerAction.cpp \
    src/game/TriggerAction.h \
    src/game/TriggerManager.cpp \
    src/game/TriggerManager.hpp \
    src/game/triggers.cpp \
    src/game/triggers.h \
    src/game/TurnAnimEvent.cpp \
    src/game/TurnAnimEvent.h \
    src/game/UAttackAnimEvent.cpp \
    src/game/UAttackAnimEvent.h \
    src/game/UHarvestEvent.cpp \
    src/game/UHarvestEvent.h \
    src/game/UInfiltrateAnimEvent.cpp \
    src/game/UInfiltrateAnimEvent.h \
    src/game/Unit.cpp \
    src/game/Unit.hpp \
    src/game/UnitAndStructureMat.h \
    src/game/unitandstructurepool.cpp \
    src/game/UnitAndStructurePool.h \
    src/game/UnitAnimEvent.cpp \
    src/game/UnitAnimEvent.h \
    src/game/UnitOrStructure.cpp \
    src/game/UnitOrStructure.h \
    src/game/UnitOrStructureType.cpp \
    src/game/UnitOrStructureType.h \
    src/game/UnitType.cpp \
    src/game/UnitType.h \
    src/game/unittypes.h \
    src/game/URepairEvent.cpp \
    src/game/URepairEvent.h \
    src/game/WalkAnimEvent.cpp \
    src/game/WalkAnimEvent.h \
    src/game/Warhead.cpp \
    src/game/Warhead.h \
    src/game/WarheadData.cpp \
    src/game/WarheadData.h \
    src/game/WarheadDataList.cpp \
    src/game/WarheadDataList.h \
    src/game/Weapon.cpp \
    src/game/Weapon.h \
    src/game/WeaponData.cpp \
    src/game/WeaponData.h \
    src/game/WeaponDataList.cpp \
    src/game/WeaponDataList.h \
    src/game/weaponspool.cpp \
    src/game/weaponspool.h \
    src/include/fcnc_endian.h \
    src/include/fibheap.h \
    src/include/imageproc.h \
    src/include/sdllayer.h \
    src/misc/args.cpp \
    src/misc/common.cpp \
    src/misc/common.h \
    src/misc/Compression.cpp \
    src/misc/Compression.hpp \
    src/misc/config.h \
    src/misc/fibheap.cpp \
    src/misc/gametypes.h \
    src/misc/IniEntry.h \
    src/misc/INIFile.cpp \
    src/misc/INIFile.h \
    src/misc/INISection.h \
    src/misc/KeyNotFound.cpp \
    src/misc/KeyNotFound.h \
    src/misc/StringTableFile.cpp \
    src/misc/StringTableFile.h \
    src/ui/Button.cpp \
    src/ui/Button.h \
    src/ui/createmode_t.h \
    src/ui/Cursor.cpp \
    src/ui/Cursor.h \
    src/ui/CursorInfo.cpp \
    src/ui/CursorInfo.h \
    src/ui/CursorPool.cpp \
    src/ui/CursorPool.h \
    src/ui/DropDownListBox.cpp \
    src/ui/DropDownListBox.h \
    src/ui/Font.cpp \
    src/ui/Font.h \
    src/ui/FontCache.cpp \
    src/ui/FontCache.h \
    src/ui/FontOptions.h \
    src/ui/Input.cpp \
    src/ui/Input.h \
    src/ui/ListboxClass.cpp \
    src/ui/ListboxClass.h \
    src/ui/ListBoxLine.h \
    src/ui/MapAnimationMenu.cpp \
    src/ui/MapAnimationMenu.hpp \
    src/ui/Menu.cpp \
    src/ui/Menu.h \
    src/ui/PauseMenu.cpp \
    src/ui/PauseMenu.h \
    src/ui/RaWindow.cpp \
    src/ui/RaWindow.h \
    src/ui/RA_Label.cpp \
    src/ui/RA_Label.h \
    src/ui/RA_ProgressBar.cpp \
    src/ui/RA_ProgressBar.h \
    src/ui/selection.cpp \
    src/ui/Selection.h \
    src/ui/sidebar.cpp \
    src/ui/Sidebar.h \
    src/ui/SidebarButton.cpp \
    src/ui/SidebarButton.h \
    src/ui/SidebarError.cpp \
    src/ui/SidebarError.h \
    src/ui/SidebarGeometry.h \
    src/ui/sidebarop.h \
    src/ui/TCheckBox.cpp \
    src/ui/TCheckBox.h \
    src/ui/TFontImage.h \
    src/ui/TTextBox.cpp \
    src/ui/TTextBox.h \
    src/vfs/archive.h \
    src/vfs/filesystem/externalvfs.cpp \
    src/vfs/filesystem/externalvfs.h \
    src/vfs/mix/blowfish.cpp \
    src/vfs/mix/blowfish.h \
    src/vfs/mix/mixvfs.cpp \
    src/vfs/mix/mixvfs.h \
    src/vfs/mix/ws-key.cpp \
    src/vfs/mix/ws-key.h \
    src/vfs/VFile.cpp \
    src/vfs/VFile.h \
    src/vfs/vfs.cpp \
    src/vfs/vfs.h \
    src/video/CPSHeader.h \
    src/video/CPSImage.cpp \
    src/video/CPSImage.h \
    src/video/drawmessage.h \
    src/video/Dune2Header.h \
    src/video/Dune2Image.cpp \
    src/video/Dune2Image.h \
    src/video/GraphicsEngine.cpp \
    src/video/GraphicsEngine.h \
    src/video/headerformats.h \
    src/video/imagecache.cpp \
    src/video/ImageCache.h \
    src/video/ImageCacheEntry.cpp \
    src/video/ImageCacheEntry.h \
    src/video/ImageNotFound.cpp \
    src/video/ImageNotFound.h \
    src/video/imageproc.cpp \
    src/video/loadingscreen.cpp \
    src/video/LoadingScreen.h \
    src/video/message.cpp \
    src/video/Message.h \
    src/video/MessagePool.cpp \
    src/video/MessagePool.h \
    src/video/Palettes.h \
    src/video/PCXHeader.h \
    src/video/PCXImage.cpp \
    src/video/PCXImage.h \
    src/video/Renderer.cpp \
    src/video/Renderer.h \
    src/video/sdllayer.cpp \
    src/video/SHPBase.cpp \
    src/video/SHPBase.h \
    src/video/SHPHeader.h \
    src/video/SHPImage.cpp \
    src/video/SHPImage.h \
    src/video/TemplateImage.cpp \
    src/video/TemplateImage.h \
    src/video/VideoError.cpp \
    src/video/VideoError.h \
    src/video/VQAHeader.h \
    src/video/VQAMovie.cpp \
    src/video/VQAMovie.h \
    src/video/WSAError.cpp \
    src/video/WSAError.h \
    src/video/WSAHeader.h \
    src/video/WSAMovie.cpp \
    src/video/WSAMovie.h

openredalert_LDFLAGS = $(SDL_CFLAGS)
openredalert_LDADD = $(SDL_LIBS)
INCLUDES = -Isrc/
EXTRA_DIST = src/* data/*
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --gnu'; \
	      $(am__cd) $(srcdir) && $(AUTOMAKE) --gnu \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	$(am__cd) $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
openredalert$(EXEEXT): $(openredalert_OBJECTS) $(openredalert_DEPENDENCIES) 
	@rm -f openredalert$(EXEEXT)
	$(openredalert_LINK) $(openredalert_OBJECTS) $(openredalert_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/ActionEvent.Po
include ./$(DEPDIR)/ActionEventQueue.Po
include ./$(DEPDIR)/Ai.Po
include ./$(DEPDIR)/AiCommand.Po
include ./$(DEPDIR)/BAttackAnimEvent.Po
include ./$(DEPDIR)/BExplodeAnimEvent.Po
include ./$(DEPDIR)/BQTimer.Po
include ./$(DEPDIR)/BQueue.Po
include ./$(DEPDIR)/BRepairUnitAnimEvent.Po
include ./$(DEPDIR)/BTurnAnimEvent.Po
include ./$(DEPDIR)/BarrelExplosionActionEvent.Po
include ./$(DEPDIR)/BuildAnimEvent.Po
include ./$(DEPDIR)/BuildingAnimEvent.Po
include ./$(DEPDIR)/Button.Po
include ./$(DEPDIR)/CPSImage.Po
include ./$(DEPDIR)/CncMap.Po
include ./$(DEPDIR)/Comp.Po
include ./$(DEPDIR)/Compression.Po
include ./$(DEPDIR)/Cursor.Po
include ./$(DEPDIR)/CursorInfo.Po
include ./$(DEPDIR)/CursorPool.Po
include ./$(DEPDIR)/DataLoader.Po
include ./$(DEPDIR)/Dispatcher.Po
include ./$(DEPDIR)/DoorAnimEvent.Po
include ./$(DEPDIR)/DropDownListBox.Po
include ./$(DEPDIR)/Dune2Image.Po
include ./$(DEPDIR)/ExplosionAnim.Po
include ./$(DEPDIR)/FibHeapEntry.Po
include ./$(DEPDIR)/Font.Po
include ./$(DEPDIR)/FontCache.Po
include ./$(DEPDIR)/Game.Po
include ./$(DEPDIR)/GameError.Po
include ./$(DEPDIR)/GlobalClearTriggerAction.Po
include ./$(DEPDIR)/GlobalSetTriggerAction.Po
include ./$(DEPDIR)/GraphicsEngine.Po
include ./$(DEPDIR)/INIFile.Po
include ./$(DEPDIR)/ImageCacheEntry.Po
include ./$(DEPDIR)/ImageNotFound.Po
include ./$(DEPDIR)/InfantryGroup.Po
include ./$(DEPDIR)/Input.Po
include ./$(DEPDIR)/KeyComp.Po
include ./$(DEPDIR)/KeyNotFound.Po
include ./$(DEPDIR)/L2Overlay.Po
include ./$(DEPDIR)/ListboxClass.Po
include ./$(DEPDIR)/LoadMapError.Po
include ./$(DEPDIR)/Logger.Po
include ./$(DEPDIR)/LoopAnimEvent.Po
include ./$(DEPDIR)/MapAnimationMenu.Po
include ./$(DEPDIR)/Menu.Po
include ./$(DEPDIR)/MessagePool.Po
include ./$(DEPDIR)/MissionData.Po
include ./$(DEPDIR)/MissionMapsClass.Po
include ./$(DEPDIR)/MissionTheater.Po
include ./$(DEPDIR)/MoneyCounter.Po
include ./$(DEPDIR)/MoveAnimEvent.Po
include ./$(DEPDIR)/MultiPlayerMaps.Po
include ./$(DEPDIR)/NoActionTriggerAction.Po
include ./$(DEPDIR)/OpenRedAlert.Po
include ./$(DEPDIR)/PCXImage.Po
include ./$(DEPDIR)/Path.Po
include ./$(DEPDIR)/PauseMenu.Po
include ./$(DEPDIR)/Player.Po
include ./$(DEPDIR)/PlayerPool.Po
include ./$(DEPDIR)/ProcAnimEvent.Po
include ./$(DEPDIR)/Projectile.Po
include ./$(DEPDIR)/ProjectileAnim.Po
include ./$(DEPDIR)/ProjectileData.Po
include ./$(DEPDIR)/ProjectileDataList.Po
include ./$(DEPDIR)/RA_Label.Po
include ./$(DEPDIR)/RA_ProgressBar.Po
include ./$(DEPDIR)/RaWindow.Po
include ./$(DEPDIR)/RadarAnimEvent.Po
include ./$(DEPDIR)/RawTriggerAction.Po
include ./$(DEPDIR)/RedAlertDataLoader.Po
include ./$(DEPDIR)/RefineAnimEvent.Po
include ./$(DEPDIR)/Renderer.Po
include ./$(DEPDIR)/RepairAnimEvent.Po
include ./$(DEPDIR)/SHPBase.Po
include ./$(DEPDIR)/SHPImage.Po
include ./$(DEPDIR)/SidebarButton.Po
include ./$(DEPDIR)/SidebarError.Po
include ./$(DEPDIR)/SnowMissionTheater.Po
include ./$(DEPDIR)/SoundEngine.Po
include ./$(DEPDIR)/SoundError.Po
include ./$(DEPDIR)/SoundFile.Po
include ./$(DEPDIR)/SoundUtils.Po
include ./$(DEPDIR)/StringTableFile.Po
include ./$(DEPDIR)/Structure.Po
include ./$(DEPDIR)/StructureType.Po
include ./$(DEPDIR)/TCheckBox.Po
include ./$(DEPDIR)/TTextBox.Po
include ./$(DEPDIR)/TemplateImage.Po
include ./$(DEPDIR)/TextTriggerAction.Po
include ./$(DEPDIR)/Trigger.Po
include ./$(DEPDIR)/TriggerAction.Po
include ./$(DEPDIR)/TriggerManager.Po
include ./$(DEPDIR)/TurnAnimEvent.Po
include ./$(DEPDIR)/UAttackAnimEvent.Po
include ./$(DEPDIR)/UHarvestEvent.Po
include ./$(DEPDIR)/UInfiltrateAnimEvent.Po
include ./$(DEPDIR)/URepairEvent.Po
include ./$(DEPDIR)/Unit.Po
include ./$(DEPDIR)/UnitAnimEvent.Po
include ./$(DEPDIR)/UnitOrStructure.Po
include ./$(DEPDIR)/UnitOrStructureType.Po
include ./$(DEPDIR)/UnitType.Po
include ./$(DEPDIR)/VFile.Po
include ./$(DEPDIR)/VQAMovie.Po
include ./$(DEPDIR)/VideoError.Po
include ./$(DEPDIR)/WSAError.Po
include ./$(DEPDIR)/WSAMovie.Po
include ./$(DEPDIR)/WalkAnimEvent.Po
include ./$(DEPDIR)/Warhead.Po
include ./$(DEPDIR)/WarheadData.Po
include ./$(DEPDIR)/WarheadDataList.Po
include ./$(DEPDIR)/Weapon.Po
include ./$(DEPDIR)/WeaponData.Po
include ./$(DEPDIR)/WeaponDataList.Po
include ./$(DEPDIR)/args.Po
include ./$(DEPDIR)/blowfish.Po
include ./$(DEPDIR)/common.Po
include ./$(DEPDIR)/externalvfs.Po
include ./$(DEPDIR)/fibheap.Po
include ./$(DEPDIR)/imagecache.Po
include ./$(DEPDIR)/imageproc.Po
include ./$(DEPDIR)/loadingscreen.Po
include ./$(DEPDIR)/message.Po
include ./$(DEPDIR)/mixvfs.Po
include ./$(DEPDIR)/sdllayer.Po
include ./$(DEPDIR)/selection.Po
include ./$(DEPDIR)/sidebar.Po
include ./$(DEPDIR)/talkback.Po
include ./$(DEPDIR)/triggers.Po
include ./$(DEPDIR)/unitandstructurepool.Po
include ./$(DEPDIR)/vfs.Po
include ./$(DEPDIR)/weaponspool.Po
include ./$(DEPDIR)/ws-key.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

OpenRedAlert.o: src/OpenRedAlert.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OpenRedAlert.o -MD -MP -MF $(DEPDIR)/OpenRedAlert.Tpo -c -o OpenRedAlert.o `test -f 'src/OpenRedAlert.cpp' || echo '$(srcdir)/'`src/OpenRedAlert.cpp
	$(am__mv) $(DEPDIR)/OpenRedAlert.Tpo $(DEPDIR)/OpenRedAlert.Po
#	source='src/OpenRedAlert.cpp' object='OpenRedAlert.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OpenRedAlert.o `test -f 'src/OpenRedAlert.cpp' || echo '$(srcdir)/'`src/OpenRedAlert.cpp

OpenRedAlert.obj: src/OpenRedAlert.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OpenRedAlert.obj -MD -MP -MF $(DEPDIR)/OpenRedAlert.Tpo -c -o OpenRedAlert.obj `if test -f 'src/OpenRedAlert.cpp'; then $(CYGPATH_W) 'src/OpenRedAlert.cpp'; else $(CYGPATH_W) '$(srcdir)/src/OpenRedAlert.cpp'; fi`
	$(am__mv) $(DEPDIR)/OpenRedAlert.Tpo $(DEPDIR)/OpenRedAlert.Po
#	source='src/OpenRedAlert.cpp' object='OpenRedAlert.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OpenRedAlert.obj `if test -f 'src/OpenRedAlert.cpp'; then $(CYGPATH_W) 'src/OpenRedAlert.cpp'; else $(CYGPATH_W) '$(srcdir)/src/OpenRedAlert.cpp'; fi`

Logger.o: src/Logger.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Logger.o -MD -MP -MF $(DEPDIR)/Logger.Tpo -c -o Logger.o `test -f 'src/Logger.cpp' || echo '$(srcdir)/'`src/Logger.cpp
	$(am__mv) $(DEPDIR)/Logger.Tpo $(DEPDIR)/Logger.Po
#	source='src/Logger.cpp' object='Logger.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Logger.o `test -f 'src/Logger.cpp' || echo '$(srcdir)/'`src/Logger.cpp

Logger.obj: src/Logger.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Logger.obj -MD -MP -MF $(DEPDIR)/Logger.Tpo -c -o Logger.obj `if test -f 'src/Logger.cpp'; then $(CYGPATH_W) 'src/Logger.cpp'; else $(CYGPATH_W) '$(srcdir)/src/Logger.cpp'; fi`
	$(am__mv) $(DEPDIR)/Logger.Tpo $(DEPDIR)/Logger.Po
#	source='src/Logger.cpp' object='Logger.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Logger.obj `if test -f 'src/Logger.cpp'; then $(CYGPATH_W) 'src/Logger.cpp'; else $(CYGPATH_W) '$(srcdir)/src/Logger.cpp'; fi`

SoundEngine.o: src/audio/SoundEngine.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SoundEngine.o -MD -MP -MF $(DEPDIR)/SoundEngine.Tpo -c -o SoundEngine.o `test -f 'src/audio/SoundEngine.cpp' || echo '$(srcdir)/'`src/audio/SoundEngine.cpp
	$(am__mv) $(DEPDIR)/SoundEngine.Tpo $(DEPDIR)/SoundEngine.Po
#	source='src/audio/SoundEngine.cpp' object='SoundEngine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SoundEngine.o `test -f 'src/audio/SoundEngine.cpp' || echo '$(srcdir)/'`src/audio/SoundEngine.cpp

SoundEngine.obj: src/audio/SoundEngine.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SoundEngine.obj -MD -MP -MF $(DEPDIR)/SoundEngine.Tpo -c -o SoundEngine.obj `if test -f 'src/audio/SoundEngine.cpp'; then $(CYGPATH_W) 'src/audio/SoundEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/src/audio/SoundEngine.cpp'; fi`
	$(am__mv) $(DEPDIR)/SoundEngine.Tpo $(DEPDIR)/SoundEngine.Po
#	source='src/audio/SoundEngine.cpp' object='SoundEngine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SoundEngine.obj `if test -f 'src/audio/SoundEngine.cpp'; then $(CYGPATH_W) 'src/audio/SoundEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/src/audio/SoundEngine.cpp'; fi`

SoundError.o: src/audio/SoundError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SoundError.o -MD -MP -MF $(DEPDIR)/SoundError.Tpo -c -o SoundError.o `test -f 'src/audio/SoundError.cpp' || echo '$(srcdir)/'`src/audio/SoundError.cpp
	$(am__mv) $(DEPDIR)/SoundError.Tpo $(DEPDIR)/SoundError.Po
#	source='src/audio/SoundError.cpp' object='SoundError.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SoundError.o `test -f 'src/audio/SoundError.cpp' || echo '$(srcdir)/'`src/audio/SoundError.cpp

SoundError.obj: src/audio/SoundError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SoundError.obj -MD -MP -MF $(DEPDIR)/SoundError.Tpo -c -o SoundError.obj `if test -f 'src/audio/SoundError.cpp'; then $(CYGPATH_W) 'src/audio/SoundError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/audio/SoundError.cpp'; fi`
	$(am__mv) $(DEPDIR)/SoundError.Tpo $(DEPDIR)/SoundError.Po
#	source='src/audio/SoundError.cpp' object='SoundError.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SoundError.obj `if test -f 'src/audio/SoundError.cpp'; then $(CYGPATH_W) 'src/audio/SoundError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/audio/SoundError.cpp'; fi`

SoundFile.o: src/audio/SoundFile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SoundFile.o -MD -MP -MF $(DEPDIR)/SoundFile.Tpo -c -o SoundFile.o `test -f 'src/audio/SoundFile.cpp' || echo '$(srcdir)/'`src/audio/SoundFile.cpp
	$(am__mv) $(DEPDIR)/SoundFile.Tpo $(DEPDIR)/SoundFile.Po
#	source='src/audio/SoundFile.cpp' object='SoundFile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SoundFile.o `test -f 'src/audio/SoundFile.cpp' || echo '$(srcdir)/'`src/audio/SoundFile.cpp

SoundFile.obj: src/audio/SoundFile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SoundFile.obj -MD -MP -MF $(DEPDIR)/SoundFile.Tpo -c -o SoundFile.obj `if test -f 'src/audio/SoundFile.cpp'; then $(CYGPATH_W) 'src/audio/SoundFile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/audio/SoundFile.cpp'; fi`
	$(am__mv) $(DEPDIR)/SoundFile.Tpo $(DEPDIR)/SoundFile.Po
#	source='src/audio/SoundFile.cpp' object='SoundFile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SoundFile.obj `if test -f 'src/audio/SoundFile.cpp'; then $(CYGPATH_W) 'src/audio/SoundFile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/audio/SoundFile.cpp'; fi`

SoundUtils.o: src/audio/SoundUtils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SoundUtils.o -MD -MP -MF $(DEPDIR)/SoundUtils.Tpo -c -o SoundUtils.o `test -f 'src/audio/SoundUtils.cpp' || echo '$(srcdir)/'`src/audio/SoundUtils.cpp
	$(am__mv) $(DEPDIR)/SoundUtils.Tpo $(DEPDIR)/SoundUtils.Po
#	source='src/audio/SoundUtils.cpp' object='SoundUtils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SoundUtils.o `test -f 'src/audio/SoundUtils.cpp' || echo '$(srcdir)/'`src/audio/SoundUtils.cpp

SoundUtils.obj: src/audio/SoundUtils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SoundUtils.obj -MD -MP -MF $(DEPDIR)/SoundUtils.Tpo -c -o SoundUtils.obj `if test -f 'src/audio/SoundUtils.cpp'; then $(CYGPATH_W) 'src/audio/SoundUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/src/audio/SoundUtils.cpp'; fi`
	$(am__mv) $(DEPDIR)/SoundUtils.Tpo $(DEPDIR)/SoundUtils.Po
#	source='src/audio/SoundUtils.cpp' object='SoundUtils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SoundUtils.obj `if test -f 'src/audio/SoundUtils.cpp'; then $(CYGPATH_W) 'src/audio/SoundUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/src/audio/SoundUtils.cpp'; fi`

ActionEvent.o: src/game/ActionEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ActionEvent.o -MD -MP -MF $(DEPDIR)/ActionEvent.Tpo -c -o ActionEvent.o `test -f 'src/game/ActionEvent.cpp' || echo '$(srcdir)/'`src/game/ActionEvent.cpp
	$(am__mv) $(DEPDIR)/ActionEvent.Tpo $(DEPDIR)/ActionEvent.Po
#	source='src/game/ActionEvent.cpp' object='ActionEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ActionEvent.o `test -f 'src/game/ActionEvent.cpp' || echo '$(srcdir)/'`src/game/ActionEvent.cpp

ActionEvent.obj: src/game/ActionEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ActionEvent.obj -MD -MP -MF $(DEPDIR)/ActionEvent.Tpo -c -o ActionEvent.obj `if test -f 'src/game/ActionEvent.cpp'; then $(CYGPATH_W) 'src/game/ActionEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ActionEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/ActionEvent.Tpo $(DEPDIR)/ActionEvent.Po
#	source='src/game/ActionEvent.cpp' object='ActionEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ActionEvent.obj `if test -f 'src/game/ActionEvent.cpp'; then $(CYGPATH_W) 'src/game/ActionEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ActionEvent.cpp'; fi`

ActionEventQueue.o: src/game/ActionEventQueue.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ActionEventQueue.o -MD -MP -MF $(DEPDIR)/ActionEventQueue.Tpo -c -o ActionEventQueue.o `test -f 'src/game/ActionEventQueue.cpp' || echo '$(srcdir)/'`src/game/ActionEventQueue.cpp
	$(am__mv) $(DEPDIR)/ActionEventQueue.Tpo $(DEPDIR)/ActionEventQueue.Po
#	source='src/game/ActionEventQueue.cpp' object='ActionEventQueue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ActionEventQueue.o `test -f 'src/game/ActionEventQueue.cpp' || echo '$(srcdir)/'`src/game/ActionEventQueue.cpp

ActionEventQueue.obj: src/game/ActionEventQueue.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ActionEventQueue.obj -MD -MP -MF $(DEPDIR)/ActionEventQueue.Tpo -c -o ActionEventQueue.obj `if test -f 'src/game/ActionEventQueue.cpp'; then $(CYGPATH_W) 'src/game/ActionEventQueue.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ActionEventQueue.cpp'; fi`
	$(am__mv) $(DEPDIR)/ActionEventQueue.Tpo $(DEPDIR)/ActionEventQueue.Po
#	source='src/game/ActionEventQueue.cpp' object='ActionEventQueue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ActionEventQueue.obj `if test -f 'src/game/ActionEventQueue.cpp'; then $(CYGPATH_W) 'src/game/ActionEventQueue.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ActionEventQueue.cpp'; fi`

Ai.o: src/game/Ai.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Ai.o -MD -MP -MF $(DEPDIR)/Ai.Tpo -c -o Ai.o `test -f 'src/game/Ai.cpp' || echo '$(srcdir)/'`src/game/Ai.cpp
	$(am__mv) $(DEPDIR)/Ai.Tpo $(DEPDIR)/Ai.Po
#	source='src/game/Ai.cpp' object='Ai.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Ai.o `test -f 'src/game/Ai.cpp' || echo '$(srcdir)/'`src/game/Ai.cpp

Ai.obj: src/game/Ai.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Ai.obj -MD -MP -MF $(DEPDIR)/Ai.Tpo -c -o Ai.obj `if test -f 'src/game/Ai.cpp'; then $(CYGPATH_W) 'src/game/Ai.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Ai.cpp'; fi`
	$(am__mv) $(DEPDIR)/Ai.Tpo $(DEPDIR)/Ai.Po
#	source='src/game/Ai.cpp' object='Ai.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Ai.obj `if test -f 'src/game/Ai.cpp'; then $(CYGPATH_W) 'src/game/Ai.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Ai.cpp'; fi`

AiCommand.o: src/game/AiCommand.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AiCommand.o -MD -MP -MF $(DEPDIR)/AiCommand.Tpo -c -o AiCommand.o `test -f 'src/game/AiCommand.cpp' || echo '$(srcdir)/'`src/game/AiCommand.cpp
	$(am__mv) $(DEPDIR)/AiCommand.Tpo $(DEPDIR)/AiCommand.Po
#	source='src/game/AiCommand.cpp' object='AiCommand.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AiCommand.o `test -f 'src/game/AiCommand.cpp' || echo '$(srcdir)/'`src/game/AiCommand.cpp

AiCommand.obj: src/game/AiCommand.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AiCommand.obj -MD -MP -MF $(DEPDIR)/AiCommand.Tpo -c -o AiCommand.obj `if test -f 'src/game/AiCommand.cpp'; then $(CYGPATH_W) 'src/game/AiCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/AiCommand.cpp'; fi`
	$(am__mv) $(DEPDIR)/AiCommand.Tpo $(DEPDIR)/AiCommand.Po
#	source='src/game/AiCommand.cpp' object='AiCommand.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AiCommand.obj `if test -f 'src/game/AiCommand.cpp'; then $(CYGPATH_W) 'src/game/AiCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/AiCommand.cpp'; fi`

BarrelExplosionActionEvent.o: src/game/BarrelExplosionActionEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BarrelExplosionActionEvent.o -MD -MP -MF $(DEPDIR)/BarrelExplosionActionEvent.Tpo -c -o BarrelExplosionActionEvent.o `test -f 'src/game/BarrelExplosionActionEvent.cpp' || echo '$(srcdir)/'`src/game/BarrelExplosionActionEvent.cpp
	$(am__mv) $(DEPDIR)/BarrelExplosionActionEvent.Tpo $(DEPDIR)/BarrelExplosionActionEvent.Po
#	source='src/game/BarrelExplosionActionEvent.cpp' object='BarrelExplosionActionEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BarrelExplosionActionEvent.o `test -f 'src/game/BarrelExplosionActionEvent.cpp' || echo '$(srcdir)/'`src/game/BarrelExplosionActionEvent.cpp

BarrelExplosionActionEvent.obj: src/game/BarrelExplosionActionEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BarrelExplosionActionEvent.obj -MD -MP -MF $(DEPDIR)/BarrelExplosionActionEvent.Tpo -c -o BarrelExplosionActionEvent.obj `if test -f 'src/game/BarrelExplosionActionEvent.cpp'; then $(CYGPATH_W) 'src/game/BarrelExplosionActionEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BarrelExplosionActionEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/BarrelExplosionActionEvent.Tpo $(DEPDIR)/BarrelExplosionActionEvent.Po
#	source='src/game/BarrelExplosionActionEvent.cpp' object='BarrelExplosionActionEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BarrelExplosionActionEvent.obj `if test -f 'src/game/BarrelExplosionActionEvent.cpp'; then $(CYGPATH_W) 'src/game/BarrelExplosionActionEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BarrelExplosionActionEvent.cpp'; fi`

BAttackAnimEvent.o: src/game/BAttackAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BAttackAnimEvent.o -MD -MP -MF $(DEPDIR)/BAttackAnimEvent.Tpo -c -o BAttackAnimEvent.o `test -f 'src/game/BAttackAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BAttackAnimEvent.cpp
	$(am__mv) $(DEPDIR)/BAttackAnimEvent.Tpo $(DEPDIR)/BAttackAnimEvent.Po
#	source='src/game/BAttackAnimEvent.cpp' object='BAttackAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BAttackAnimEvent.o `test -f 'src/game/BAttackAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BAttackAnimEvent.cpp

BAttackAnimEvent.obj: src/game/BAttackAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BAttackAnimEvent.obj -MD -MP -MF $(DEPDIR)/BAttackAnimEvent.Tpo -c -o BAttackAnimEvent.obj `if test -f 'src/game/BAttackAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BAttackAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BAttackAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/BAttackAnimEvent.Tpo $(DEPDIR)/BAttackAnimEvent.Po
#	source='src/game/BAttackAnimEvent.cpp' object='BAttackAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BAttackAnimEvent.obj `if test -f 'src/game/BAttackAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BAttackAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BAttackAnimEvent.cpp'; fi`

BExplodeAnimEvent.o: src/game/BExplodeAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BExplodeAnimEvent.o -MD -MP -MF $(DEPDIR)/BExplodeAnimEvent.Tpo -c -o BExplodeAnimEvent.o `test -f 'src/game/BExplodeAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BExplodeAnimEvent.cpp
	$(am__mv) $(DEPDIR)/BExplodeAnimEvent.Tpo $(DEPDIR)/BExplodeAnimEvent.Po
#	source='src/game/BExplodeAnimEvent.cpp' object='BExplodeAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BExplodeAnimEvent.o `test -f 'src/game/BExplodeAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BExplodeAnimEvent.cpp

BExplodeAnimEvent.obj: src/game/BExplodeAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BExplodeAnimEvent.obj -MD -MP -MF $(DEPDIR)/BExplodeAnimEvent.Tpo -c -o BExplodeAnimEvent.obj `if test -f 'src/game/BExplodeAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BExplodeAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BExplodeAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/BExplodeAnimEvent.Tpo $(DEPDIR)/BExplodeAnimEvent.Po
#	source='src/game/BExplodeAnimEvent.cpp' object='BExplodeAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BExplodeAnimEvent.obj `if test -f 'src/game/BExplodeAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BExplodeAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BExplodeAnimEvent.cpp'; fi`

BQTimer.o: src/game/BQTimer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BQTimer.o -MD -MP -MF $(DEPDIR)/BQTimer.Tpo -c -o BQTimer.o `test -f 'src/game/BQTimer.cpp' || echo '$(srcdir)/'`src/game/BQTimer.cpp
	$(am__mv) $(DEPDIR)/BQTimer.Tpo $(DEPDIR)/BQTimer.Po
#	source='src/game/BQTimer.cpp' object='BQTimer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BQTimer.o `test -f 'src/game/BQTimer.cpp' || echo '$(srcdir)/'`src/game/BQTimer.cpp

BQTimer.obj: src/game/BQTimer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BQTimer.obj -MD -MP -MF $(DEPDIR)/BQTimer.Tpo -c -o BQTimer.obj `if test -f 'src/game/BQTimer.cpp'; then $(CYGPATH_W) 'src/game/BQTimer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BQTimer.cpp'; fi`
	$(am__mv) $(DEPDIR)/BQTimer.Tpo $(DEPDIR)/BQTimer.Po
#	source='src/game/BQTimer.cpp' object='BQTimer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BQTimer.obj `if test -f 'src/game/BQTimer.cpp'; then $(CYGPATH_W) 'src/game/BQTimer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BQTimer.cpp'; fi`

BQueue.o: src/game/BQueue.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BQueue.o -MD -MP -MF $(DEPDIR)/BQueue.Tpo -c -o BQueue.o `test -f 'src/game/BQueue.cpp' || echo '$(srcdir)/'`src/game/BQueue.cpp
	$(am__mv) $(DEPDIR)/BQueue.Tpo $(DEPDIR)/BQueue.Po
#	source='src/game/BQueue.cpp' object='BQueue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BQueue.o `test -f 'src/game/BQueue.cpp' || echo '$(srcdir)/'`src/game/BQueue.cpp

BQueue.obj: src/game/BQueue.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BQueue.obj -MD -MP -MF $(DEPDIR)/BQueue.Tpo -c -o BQueue.obj `if test -f 'src/game/BQueue.cpp'; then $(CYGPATH_W) 'src/game/BQueue.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BQueue.cpp'; fi`
	$(am__mv) $(DEPDIR)/BQueue.Tpo $(DEPDIR)/BQueue.Po
#	source='src/game/BQueue.cpp' object='BQueue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BQueue.obj `if test -f 'src/game/BQueue.cpp'; then $(CYGPATH_W) 'src/game/BQueue.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BQueue.cpp'; fi`

BRepairUnitAnimEvent.o: src/game/BRepairUnitAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BRepairUnitAnimEvent.o -MD -MP -MF $(DEPDIR)/BRepairUnitAnimEvent.Tpo -c -o BRepairUnitAnimEvent.o `test -f 'src/game/BRepairUnitAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BRepairUnitAnimEvent.cpp
	$(am__mv) $(DEPDIR)/BRepairUnitAnimEvent.Tpo $(DEPDIR)/BRepairUnitAnimEvent.Po
#	source='src/game/BRepairUnitAnimEvent.cpp' object='BRepairUnitAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BRepairUnitAnimEvent.o `test -f 'src/game/BRepairUnitAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BRepairUnitAnimEvent.cpp

BRepairUnitAnimEvent.obj: src/game/BRepairUnitAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BRepairUnitAnimEvent.obj -MD -MP -MF $(DEPDIR)/BRepairUnitAnimEvent.Tpo -c -o BRepairUnitAnimEvent.obj `if test -f 'src/game/BRepairUnitAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BRepairUnitAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BRepairUnitAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/BRepairUnitAnimEvent.Tpo $(DEPDIR)/BRepairUnitAnimEvent.Po
#	source='src/game/BRepairUnitAnimEvent.cpp' object='BRepairUnitAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BRepairUnitAnimEvent.obj `if test -f 'src/game/BRepairUnitAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BRepairUnitAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BRepairUnitAnimEvent.cpp'; fi`

BTurnAnimEvent.o: src/game/BTurnAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BTurnAnimEvent.o -MD -MP -MF $(DEPDIR)/BTurnAnimEvent.Tpo -c -o BTurnAnimEvent.o `test -f 'src/game/BTurnAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BTurnAnimEvent.cpp
	$(am__mv) $(DEPDIR)/BTurnAnimEvent.Tpo $(DEPDIR)/BTurnAnimEvent.Po
#	source='src/game/BTurnAnimEvent.cpp' object='BTurnAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BTurnAnimEvent.o `test -f 'src/game/BTurnAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BTurnAnimEvent.cpp

BTurnAnimEvent.obj: src/game/BTurnAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BTurnAnimEvent.obj -MD -MP -MF $(DEPDIR)/BTurnAnimEvent.Tpo -c -o BTurnAnimEvent.obj `if test -f 'src/game/BTurnAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BTurnAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BTurnAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/BTurnAnimEvent.Tpo $(DEPDIR)/BTurnAnimEvent.Po
#	source='src/game/BTurnAnimEvent.cpp' object='BTurnAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BTurnAnimEvent.obj `if test -f 'src/game/BTurnAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BTurnAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BTurnAnimEvent.cpp'; fi`

BuildAnimEvent.o: src/game/BuildAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BuildAnimEvent.o -MD -MP -MF $(DEPDIR)/BuildAnimEvent.Tpo -c -o BuildAnimEvent.o `test -f 'src/game/BuildAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BuildAnimEvent.cpp
	$(am__mv) $(DEPDIR)/BuildAnimEvent.Tpo $(DEPDIR)/BuildAnimEvent.Po
#	source='src/game/BuildAnimEvent.cpp' object='BuildAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BuildAnimEvent.o `test -f 'src/game/BuildAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BuildAnimEvent.cpp

BuildAnimEvent.obj: src/game/BuildAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BuildAnimEvent.obj -MD -MP -MF $(DEPDIR)/BuildAnimEvent.Tpo -c -o BuildAnimEvent.obj `if test -f 'src/game/BuildAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BuildAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BuildAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/BuildAnimEvent.Tpo $(DEPDIR)/BuildAnimEvent.Po
#	source='src/game/BuildAnimEvent.cpp' object='BuildAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BuildAnimEvent.obj `if test -f 'src/game/BuildAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BuildAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BuildAnimEvent.cpp'; fi`

BuildingAnimEvent.o: src/game/BuildingAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BuildingAnimEvent.o -MD -MP -MF $(DEPDIR)/BuildingAnimEvent.Tpo -c -o BuildingAnimEvent.o `test -f 'src/game/BuildingAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BuildingAnimEvent.cpp
	$(am__mv) $(DEPDIR)/BuildingAnimEvent.Tpo $(DEPDIR)/BuildingAnimEvent.Po
#	source='src/game/BuildingAnimEvent.cpp' object='BuildingAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BuildingAnimEvent.o `test -f 'src/game/BuildingAnimEvent.cpp' || echo '$(srcdir)/'`src/game/BuildingAnimEvent.cpp

BuildingAnimEvent.obj: src/game/BuildingAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BuildingAnimEvent.obj -MD -MP -MF $(DEPDIR)/BuildingAnimEvent.Tpo -c -o BuildingAnimEvent.obj `if test -f 'src/game/BuildingAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BuildingAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BuildingAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/BuildingAnimEvent.Tpo $(DEPDIR)/BuildingAnimEvent.Po
#	source='src/game/BuildingAnimEvent.cpp' object='BuildingAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BuildingAnimEvent.obj `if test -f 'src/game/BuildingAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/BuildingAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/BuildingAnimEvent.cpp'; fi`

CncMap.o: src/game/CncMap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CncMap.o -MD -MP -MF $(DEPDIR)/CncMap.Tpo -c -o CncMap.o `test -f 'src/game/CncMap.cpp' || echo '$(srcdir)/'`src/game/CncMap.cpp
	$(am__mv) $(DEPDIR)/CncMap.Tpo $(DEPDIR)/CncMap.Po
#	source='src/game/CncMap.cpp' object='CncMap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CncMap.o `test -f 'src/game/CncMap.cpp' || echo '$(srcdir)/'`src/game/CncMap.cpp

CncMap.obj: src/game/CncMap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CncMap.obj -MD -MP -MF $(DEPDIR)/CncMap.Tpo -c -o CncMap.obj `if test -f 'src/game/CncMap.cpp'; then $(CYGPATH_W) 'src/game/CncMap.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/CncMap.cpp'; fi`
	$(am__mv) $(DEPDIR)/CncMap.Tpo $(DEPDIR)/CncMap.Po
#	source='src/game/CncMap.cpp' object='CncMap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CncMap.obj `if test -f 'src/game/CncMap.cpp'; then $(CYGPATH_W) 'src/game/CncMap.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/CncMap.cpp'; fi`

Comp.o: src/game/Comp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Comp.o -MD -MP -MF $(DEPDIR)/Comp.Tpo -c -o Comp.o `test -f 'src/game/Comp.cpp' || echo '$(srcdir)/'`src/game/Comp.cpp
	$(am__mv) $(DEPDIR)/Comp.Tpo $(DEPDIR)/Comp.Po
#	source='src/game/Comp.cpp' object='Comp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Comp.o `test -f 'src/game/Comp.cpp' || echo '$(srcdir)/'`src/game/Comp.cpp

Comp.obj: src/game/Comp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Comp.obj -MD -MP -MF $(DEPDIR)/Comp.Tpo -c -o Comp.obj `if test -f 'src/game/Comp.cpp'; then $(CYGPATH_W) 'src/game/Comp.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Comp.cpp'; fi`
	$(am__mv) $(DEPDIR)/Comp.Tpo $(DEPDIR)/Comp.Po
#	source='src/game/Comp.cpp' object='Comp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Comp.obj `if test -f 'src/game/Comp.cpp'; then $(CYGPATH_W) 'src/game/Comp.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Comp.cpp'; fi`

DataLoader.o: src/game/DataLoader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DataLoader.o -MD -MP -MF $(DEPDIR)/DataLoader.Tpo -c -o DataLoader.o `test -f 'src/game/DataLoader.cpp' || echo '$(srcdir)/'`src/game/DataLoader.cpp
	$(am__mv) $(DEPDIR)/DataLoader.Tpo $(DEPDIR)/DataLoader.Po
#	source='src/game/DataLoader.cpp' object='DataLoader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DataLoader.o `test -f 'src/game/DataLoader.cpp' || echo '$(srcdir)/'`src/game/DataLoader.cpp

DataLoader.obj: src/game/DataLoader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DataLoader.obj -MD -MP -MF $(DEPDIR)/DataLoader.Tpo -c -o DataLoader.obj `if test -f 'src/game/DataLoader.cpp'; then $(CYGPATH_W) 'src/game/DataLoader.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/DataLoader.cpp'; fi`
	$(am__mv) $(DEPDIR)/DataLoader.Tpo $(DEPDIR)/DataLoader.Po
#	source='src/game/DataLoader.cpp' object='DataLoader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DataLoader.obj `if test -f 'src/game/DataLoader.cpp'; then $(CYGPATH_W) 'src/game/DataLoader.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/DataLoader.cpp'; fi`

Dispatcher.o: src/game/Dispatcher.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dispatcher.o -MD -MP -MF $(DEPDIR)/Dispatcher.Tpo -c -o Dispatcher.o `test -f 'src/game/Dispatcher.cpp' || echo '$(srcdir)/'`src/game/Dispatcher.cpp
	$(am__mv) $(DEPDIR)/Dispatcher.Tpo $(DEPDIR)/Dispatcher.Po
#	source='src/game/Dispatcher.cpp' object='Dispatcher.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dispatcher.o `test -f 'src/game/Dispatcher.cpp' || echo '$(srcdir)/'`src/game/Dispatcher.cpp

Dispatcher.obj: src/game/Dispatcher.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dispatcher.obj -MD -MP -MF $(DEPDIR)/Dispatcher.Tpo -c -o Dispatcher.obj `if test -f 'src/game/Dispatcher.cpp'; then $(CYGPATH_W) 'src/game/Dispatcher.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Dispatcher.cpp'; fi`
	$(am__mv) $(DEPDIR)/Dispatcher.Tpo $(DEPDIR)/Dispatcher.Po
#	source='src/game/Dispatcher.cpp' object='Dispatcher.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dispatcher.obj `if test -f 'src/game/Dispatcher.cpp'; then $(CYGPATH_W) 'src/game/Dispatcher.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Dispatcher.cpp'; fi`

DoorAnimEvent.o: src/game/DoorAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DoorAnimEvent.o -MD -MP -MF $(DEPDIR)/DoorAnimEvent.Tpo -c -o DoorAnimEvent.o `test -f 'src/game/DoorAnimEvent.cpp' || echo '$(srcdir)/'`src/game/DoorAnimEvent.cpp
	$(am__mv) $(DEPDIR)/DoorAnimEvent.Tpo $(DEPDIR)/DoorAnimEvent.Po
#	source='src/game/DoorAnimEvent.cpp' object='DoorAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DoorAnimEvent.o `test -f 'src/game/DoorAnimEvent.cpp' || echo '$(srcdir)/'`src/game/DoorAnimEvent.cpp

DoorAnimEvent.obj: src/game/DoorAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DoorAnimEvent.obj -MD -MP -MF $(DEPDIR)/DoorAnimEvent.Tpo -c -o DoorAnimEvent.obj `if test -f 'src/game/DoorAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/DoorAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/DoorAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/DoorAnimEvent.Tpo $(DEPDIR)/DoorAnimEvent.Po
#	source='src/game/DoorAnimEvent.cpp' object='DoorAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DoorAnimEvent.obj `if test -f 'src/game/DoorAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/DoorAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/DoorAnimEvent.cpp'; fi`

ExplosionAnim.o: src/game/ExplosionAnim.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ExplosionAnim.o -MD -MP -MF $(DEPDIR)/ExplosionAnim.Tpo -c -o ExplosionAnim.o `test -f 'src/game/ExplosionAnim.cpp' || echo '$(srcdir)/'`src/game/ExplosionAnim.cpp
	$(am__mv) $(DEPDIR)/ExplosionAnim.Tpo $(DEPDIR)/ExplosionAnim.Po
#	source='src/game/ExplosionAnim.cpp' object='ExplosionAnim.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ExplosionAnim.o `test -f 'src/game/ExplosionAnim.cpp' || echo '$(srcdir)/'`src/game/ExplosionAnim.cpp

ExplosionAnim.obj: src/game/ExplosionAnim.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ExplosionAnim.obj -MD -MP -MF $(DEPDIR)/ExplosionAnim.Tpo -c -o ExplosionAnim.obj `if test -f 'src/game/ExplosionAnim.cpp'; then $(CYGPATH_W) 'src/game/ExplosionAnim.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ExplosionAnim.cpp'; fi`
	$(am__mv) $(DEPDIR)/ExplosionAnim.Tpo $(DEPDIR)/ExplosionAnim.Po
#	source='src/game/ExplosionAnim.cpp' object='ExplosionAnim.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ExplosionAnim.obj `if test -f 'src/game/ExplosionAnim.cpp'; then $(CYGPATH_W) 'src/game/ExplosionAnim.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ExplosionAnim.cpp'; fi`

FibHeapEntry.o: src/game/FibHeapEntry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FibHeapEntry.o -MD -MP -MF $(DEPDIR)/FibHeapEntry.Tpo -c -o FibHeapEntry.o `test -f 'src/game/FibHeapEntry.cpp' || echo '$(srcdir)/'`src/game/FibHeapEntry.cpp
	$(am__mv) $(DEPDIR)/FibHeapEntry.Tpo $(DEPDIR)/FibHeapEntry.Po
#	source='src/game/FibHeapEntry.cpp' object='FibHeapEntry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FibHeapEntry.o `test -f 'src/game/FibHeapEntry.cpp' || echo '$(srcdir)/'`src/game/FibHeapEntry.cpp

FibHeapEntry.obj: src/game/FibHeapEntry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FibHeapEntry.obj -MD -MP -MF $(DEPDIR)/FibHeapEntry.Tpo -c -o FibHeapEntry.obj `if test -f 'src/game/FibHeapEntry.cpp'; then $(CYGPATH_W) 'src/game/FibHeapEntry.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/FibHeapEntry.cpp'; fi`
	$(am__mv) $(DEPDIR)/FibHeapEntry.Tpo $(DEPDIR)/FibHeapEntry.Po
#	source='src/game/FibHeapEntry.cpp' object='FibHeapEntry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FibHeapEntry.obj `if test -f 'src/game/FibHeapEntry.cpp'; then $(CYGPATH_W) 'src/game/FibHeapEntry.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/FibHeapEntry.cpp'; fi`

Game.o: src/game/Game.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Game.o -MD -MP -MF $(DEPDIR)/Game.Tpo -c -o Game.o `test -f 'src/game/Game.cpp' || echo '$(srcdir)/'`src/game/Game.cpp
	$(am__mv) $(DEPDIR)/Game.Tpo $(DEPDIR)/Game.Po
#	source='src/game/Game.cpp' object='Game.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Game.o `test -f 'src/game/Game.cpp' || echo '$(srcdir)/'`src/game/Game.cpp

Game.obj: src/game/Game.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Game.obj -MD -MP -MF $(DEPDIR)/Game.Tpo -c -o Game.obj `if test -f 'src/game/Game.cpp'; then $(CYGPATH_W) 'src/game/Game.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Game.cpp'; fi`
	$(am__mv) $(DEPDIR)/Game.Tpo $(DEPDIR)/Game.Po
#	source='src/game/Game.cpp' object='Game.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Game.obj `if test -f 'src/game/Game.cpp'; then $(CYGPATH_W) 'src/game/Game.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Game.cpp'; fi`

GameError.o: src/game/GameError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GameError.o -MD -MP -MF $(DEPDIR)/GameError.Tpo -c -o GameError.o `test -f 'src/game/GameError.cpp' || echo '$(srcdir)/'`src/game/GameError.cpp
	$(am__mv) $(DEPDIR)/GameError.Tpo $(DEPDIR)/GameError.Po
#	source='src/game/GameError.cpp' object='GameError.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GameError.o `test -f 'src/game/GameError.cpp' || echo '$(srcdir)/'`src/game/GameError.cpp

GameError.obj: src/game/GameError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GameError.obj -MD -MP -MF $(DEPDIR)/GameError.Tpo -c -o GameError.obj `if test -f 'src/game/GameError.cpp'; then $(CYGPATH_W) 'src/game/GameError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/GameError.cpp'; fi`
	$(am__mv) $(DEPDIR)/GameError.Tpo $(DEPDIR)/GameError.Po
#	source='src/game/GameError.cpp' object='GameError.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GameError.obj `if test -f 'src/game/GameError.cpp'; then $(CYGPATH_W) 'src/game/GameError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/GameError.cpp'; fi`

GlobalClearTriggerAction.o: src/game/GlobalClearTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GlobalClearTriggerAction.o -MD -MP -MF $(DEPDIR)/GlobalClearTriggerAction.Tpo -c -o GlobalClearTriggerAction.o `test -f 'src/game/GlobalClearTriggerAction.cpp' || echo '$(srcdir)/'`src/game/GlobalClearTriggerAction.cpp
	$(am__mv) $(DEPDIR)/GlobalClearTriggerAction.Tpo $(DEPDIR)/GlobalClearTriggerAction.Po
#	source='src/game/GlobalClearTriggerAction.cpp' object='GlobalClearTriggerAction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GlobalClearTriggerAction.o `test -f 'src/game/GlobalClearTriggerAction.cpp' || echo '$(srcdir)/'`src/game/GlobalClearTriggerAction.cpp

GlobalClearTriggerAction.obj: src/game/GlobalClearTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GlobalClearTriggerAction.obj -MD -MP -MF $(DEPDIR)/GlobalClearTriggerAction.Tpo -c -o GlobalClearTriggerAction.obj `if test -f 'src/game/GlobalClearTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/GlobalClearTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/GlobalClearTriggerAction.cpp'; fi`
	$(am__mv) $(DEPDIR)/GlobalClearTriggerAction.Tpo $(DEPDIR)/GlobalClearTriggerAction.Po
#	source='src/game/GlobalClearTriggerAction.cpp' object='GlobalClearTriggerAction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GlobalClearTriggerAction.obj `if test -f 'src/game/GlobalClearTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/GlobalClearTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/GlobalClearTriggerAction.cpp'; fi`

GlobalSetTriggerAction.o: src/game/GlobalSetTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GlobalSetTriggerAction.o -MD -MP -MF $(DEPDIR)/GlobalSetTriggerAction.Tpo -c -o GlobalSetTriggerAction.o `test -f 'src/game/GlobalSetTriggerAction.cpp' || echo '$(srcdir)/'`src/game/GlobalSetTriggerAction.cpp
	$(am__mv) $(DEPDIR)/GlobalSetTriggerAction.Tpo $(DEPDIR)/GlobalSetTriggerAction.Po
#	source='src/game/GlobalSetTriggerAction.cpp' object='GlobalSetTriggerAction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GlobalSetTriggerAction.o `test -f 'src/game/GlobalSetTriggerAction.cpp' || echo '$(srcdir)/'`src/game/GlobalSetTriggerAction.cpp

GlobalSetTriggerAction.obj: src/game/GlobalSetTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GlobalSetTriggerAction.obj -MD -MP -MF $(DEPDIR)/GlobalSetTriggerAction.Tpo -c -o GlobalSetTriggerAction.obj `if test -f 'src/game/GlobalSetTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/GlobalSetTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/GlobalSetTriggerAction.cpp'; fi`
	$(am__mv) $(DEPDIR)/GlobalSetTriggerAction.Tpo $(DEPDIR)/GlobalSetTriggerAction.Po
#	source='src/game/GlobalSetTriggerAction.cpp' object='GlobalSetTriggerAction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GlobalSetTriggerAction.obj `if test -f 'src/game/GlobalSetTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/GlobalSetTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/GlobalSetTriggerAction.cpp'; fi`

InfantryGroup.o: src/game/InfantryGroup.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InfantryGroup.o -MD -MP -MF $(DEPDIR)/InfantryGroup.Tpo -c -o InfantryGroup.o `test -f 'src/game/InfantryGroup.cpp' || echo '$(srcdir)/'`src/game/InfantryGroup.cpp
	$(am__mv) $(DEPDIR)/InfantryGroup.Tpo $(DEPDIR)/InfantryGroup.Po
#	source='src/game/InfantryGroup.cpp' object='InfantryGroup.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InfantryGroup.o `test -f 'src/game/InfantryGroup.cpp' || echo '$(srcdir)/'`src/game/InfantryGroup.cpp

InfantryGroup.obj: src/game/InfantryGroup.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InfantryGroup.obj -MD -MP -MF $(DEPDIR)/InfantryGroup.Tpo -c -o InfantryGroup.obj `if test -f 'src/game/InfantryGroup.cpp'; then $(CYGPATH_W) 'src/game/InfantryGroup.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/InfantryGroup.cpp'; fi`
	$(am__mv) $(DEPDIR)/InfantryGroup.Tpo $(DEPDIR)/InfantryGroup.Po
#	source='src/game/InfantryGroup.cpp' object='InfantryGroup.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InfantryGroup.obj `if test -f 'src/game/InfantryGroup.cpp'; then $(CYGPATH_W) 'src/game/InfantryGroup.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/InfantryGroup.cpp'; fi`

KeyComp.o: src/game/KeyComp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyComp.o -MD -MP -MF $(DEPDIR)/KeyComp.Tpo -c -o KeyComp.o `test -f 'src/game/KeyComp.cpp' || echo '$(srcdir)/'`src/game/KeyComp.cpp
	$(am__mv) $(DEPDIR)/KeyComp.Tpo $(DEPDIR)/KeyComp.Po
#	source='src/game/KeyComp.cpp' object='KeyComp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyComp.o `test -f 'src/game/KeyComp.cpp' || echo '$(srcdir)/'`src/game/KeyComp.cpp

KeyComp.obj: src/game/KeyComp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyComp.obj -MD -MP -MF $(DEPDIR)/KeyComp.Tpo -c -o KeyComp.obj `if test -f 'src/game/KeyComp.cpp'; then $(CYGPATH_W) 'src/game/KeyComp.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/KeyComp.cpp'; fi`
	$(am__mv) $(DEPDIR)/KeyComp.Tpo $(DEPDIR)/KeyComp.Po
#	source='src/game/KeyComp.cpp' object='KeyComp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyComp.obj `if test -f 'src/game/KeyComp.cpp'; then $(CYGPATH_W) 'src/game/KeyComp.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/KeyComp.cpp'; fi`

L2Overlay.o: src/game/L2Overlay.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT L2Overlay.o -MD -MP -MF $(DEPDIR)/L2Overlay.Tpo -c -o L2Overlay.o `test -f 'src/game/L2Overlay.cpp' || echo '$(srcdir)/'`src/game/L2Overlay.cpp
	$(am__mv) $(DEPDIR)/L2Overlay.Tpo $(DEPDIR)/L2Overlay.Po
#	source='src/game/L2Overlay.cpp' object='L2Overlay.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o L2Overlay.o `test -f 'src/game/L2Overlay.cpp' || echo '$(srcdir)/'`src/game/L2Overlay.cpp

L2Overlay.obj: src/game/L2Overlay.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT L2Overlay.obj -MD -MP -MF $(DEPDIR)/L2Overlay.Tpo -c -o L2Overlay.obj `if test -f 'src/game/L2Overlay.cpp'; then $(CYGPATH_W) 'src/game/L2Overlay.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/L2Overlay.cpp'; fi`
	$(am__mv) $(DEPDIR)/L2Overlay.Tpo $(DEPDIR)/L2Overlay.Po
#	source='src/game/L2Overlay.cpp' object='L2Overlay.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o L2Overlay.obj `if test -f 'src/game/L2Overlay.cpp'; then $(CYGPATH_W) 'src/game/L2Overlay.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/L2Overlay.cpp'; fi`

LoadMapError.o: src/game/LoadMapError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LoadMapError.o -MD -MP -MF $(DEPDIR)/LoadMapError.Tpo -c -o LoadMapError.o `test -f 'src/game/LoadMapError.cpp' || echo '$(srcdir)/'`src/game/LoadMapError.cpp
	$(am__mv) $(DEPDIR)/LoadMapError.Tpo $(DEPDIR)/LoadMapError.Po
#	source='src/game/LoadMapError.cpp' object='LoadMapError.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LoadMapError.o `test -f 'src/game/LoadMapError.cpp' || echo '$(srcdir)/'`src/game/LoadMapError.cpp

LoadMapError.obj: src/game/LoadMapError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LoadMapError.obj -MD -MP -MF $(DEPDIR)/LoadMapError.Tpo -c -o LoadMapError.obj `if test -f 'src/game/LoadMapError.cpp'; then $(CYGPATH_W) 'src/game/LoadMapError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/LoadMapError.cpp'; fi`
	$(am__mv) $(DEPDIR)/LoadMapError.Tpo $(DEPDIR)/LoadMapError.Po
#	source='src/game/LoadMapError.cpp' object='LoadMapError.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LoadMapError.obj `if test -f 'src/game/LoadMapError.cpp'; then $(CYGPATH_W) 'src/game/LoadMapError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/LoadMapError.cpp'; fi`

LoopAnimEvent.o: src/game/LoopAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LoopAnimEvent.o -MD -MP -MF $(DEPDIR)/LoopAnimEvent.Tpo -c -o LoopAnimEvent.o `test -f 'src/game/LoopAnimEvent.cpp' || echo '$(srcdir)/'`src/game/LoopAnimEvent.cpp
	$(am__mv) $(DEPDIR)/LoopAnimEvent.Tpo $(DEPDIR)/LoopAnimEvent.Po
#	source='src/game/LoopAnimEvent.cpp' object='LoopAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LoopAnimEvent.o `test -f 'src/game/LoopAnimEvent.cpp' || echo '$(srcdir)/'`src/game/LoopAnimEvent.cpp

LoopAnimEvent.obj: src/game/LoopAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LoopAnimEvent.obj -MD -MP -MF $(DEPDIR)/LoopAnimEvent.Tpo -c -o LoopAnimEvent.obj `if test -f 'src/game/LoopAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/LoopAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/LoopAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/LoopAnimEvent.Tpo $(DEPDIR)/LoopAnimEvent.Po
#	source='src/game/LoopAnimEvent.cpp' object='LoopAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LoopAnimEvent.obj `if test -f 'src/game/LoopAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/LoopAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/LoopAnimEvent.cpp'; fi`

MissionData.o: src/game/MissionData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionData.o -MD -MP -MF $(DEPDIR)/MissionData.Tpo -c -o MissionData.o `test -f 'src/game/MissionData.cpp' || echo '$(srcdir)/'`src/game/MissionData.cpp
	$(am__mv) $(DEPDIR)/MissionData.Tpo $(DEPDIR)/MissionData.Po
#	source='src/game/MissionData.cpp' object='MissionData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionData.o `test -f 'src/game/MissionData.cpp' || echo '$(srcdir)/'`src/game/MissionData.cpp

MissionData.obj: src/game/MissionData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionData.obj -MD -MP -MF $(DEPDIR)/MissionData.Tpo -c -o MissionData.obj `if test -f 'src/game/MissionData.cpp'; then $(CYGPATH_W) 'src/game/MissionData.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MissionData.cpp'; fi`
	$(am__mv) $(DEPDIR)/MissionData.Tpo $(DEPDIR)/MissionData.Po
#	source='src/game/MissionData.cpp' object='MissionData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionData.obj `if test -f 'src/game/MissionData.cpp'; then $(CYGPATH_W) 'src/game/MissionData.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MissionData.cpp'; fi`

MissionMapsClass.o: src/game/MissionMapsClass.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionMapsClass.o -MD -MP -MF $(DEPDIR)/MissionMapsClass.Tpo -c -o MissionMapsClass.o `test -f 'src/game/MissionMapsClass.cpp' || echo '$(srcdir)/'`src/game/MissionMapsClass.cpp
	$(am__mv) $(DEPDIR)/MissionMapsClass.Tpo $(DEPDIR)/MissionMapsClass.Po
#	source='src/game/MissionMapsClass.cpp' object='MissionMapsClass.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionMapsClass.o `test -f 'src/game/MissionMapsClass.cpp' || echo '$(srcdir)/'`src/game/MissionMapsClass.cpp

MissionMapsClass.obj: src/game/MissionMapsClass.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionMapsClass.obj -MD -MP -MF $(DEPDIR)/MissionMapsClass.Tpo -c -o MissionMapsClass.obj `if test -f 'src/game/MissionMapsClass.cpp'; then $(CYGPATH_W) 'src/game/MissionMapsClass.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MissionMapsClass.cpp'; fi`
	$(am__mv) $(DEPDIR)/MissionMapsClass.Tpo $(DEPDIR)/MissionMapsClass.Po
#	source='src/game/MissionMapsClass.cpp' object='MissionMapsClass.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionMapsClass.obj `if test -f 'src/game/MissionMapsClass.cpp'; then $(CYGPATH_W) 'src/game/MissionMapsClass.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MissionMapsClass.cpp'; fi`

MissionTheater.o: src/game/MissionTheater.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionTheater.o -MD -MP -MF $(DEPDIR)/MissionTheater.Tpo -c -o MissionTheater.o `test -f 'src/game/MissionTheater.cpp' || echo '$(srcdir)/'`src/game/MissionTheater.cpp
	$(am__mv) $(DEPDIR)/MissionTheater.Tpo $(DEPDIR)/MissionTheater.Po
#	source='src/game/MissionTheater.cpp' object='MissionTheater.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionTheater.o `test -f 'src/game/MissionTheater.cpp' || echo '$(srcdir)/'`src/game/MissionTheater.cpp

MissionTheater.obj: src/game/MissionTheater.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionTheater.obj -MD -MP -MF $(DEPDIR)/MissionTheater.Tpo -c -o MissionTheater.obj `if test -f 'src/game/MissionTheater.cpp'; then $(CYGPATH_W) 'src/game/MissionTheater.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MissionTheater.cpp'; fi`
	$(am__mv) $(DEPDIR)/MissionTheater.Tpo $(DEPDIR)/MissionTheater.Po
#	source='src/game/MissionTheater.cpp' object='MissionTheater.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionTheater.obj `if test -f 'src/game/MissionTheater.cpp'; then $(CYGPATH_W) 'src/game/MissionTheater.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MissionTheater.cpp'; fi`

MoneyCounter.o: src/game/MoneyCounter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MoneyCounter.o -MD -MP -MF $(DEPDIR)/MoneyCounter.Tpo -c -o MoneyCounter.o `test -f 'src/game/MoneyCounter.cpp' || echo '$(srcdir)/'`src/game/MoneyCounter.cpp
	$(am__mv) $(DEPDIR)/MoneyCounter.Tpo $(DEPDIR)/MoneyCounter.Po
#	source='src/game/MoneyCounter.cpp' object='MoneyCounter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MoneyCounter.o `test -f 'src/game/MoneyCounter.cpp' || echo '$(srcdir)/'`src/game/MoneyCounter.cpp

MoneyCounter.obj: src/game/MoneyCounter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MoneyCounter.obj -MD -MP -MF $(DEPDIR)/MoneyCounter.Tpo -c -o MoneyCounter.obj `if test -f 'src/game/MoneyCounter.cpp'; then $(CYGPATH_W) 'src/game/MoneyCounter.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MoneyCounter.cpp'; fi`
	$(am__mv) $(DEPDIR)/MoneyCounter.Tpo $(DEPDIR)/MoneyCounter.Po
#	source='src/game/MoneyCounter.cpp' object='MoneyCounter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MoneyCounter.obj `if test -f 'src/game/MoneyCounter.cpp'; then $(CYGPATH_W) 'src/game/MoneyCounter.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MoneyCounter.cpp'; fi`

MoveAnimEvent.o: src/game/MoveAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MoveAnimEvent.o -MD -MP -MF $(DEPDIR)/MoveAnimEvent.Tpo -c -o MoveAnimEvent.o `test -f 'src/game/MoveAnimEvent.cpp' || echo '$(srcdir)/'`src/game/MoveAnimEvent.cpp
	$(am__mv) $(DEPDIR)/MoveAnimEvent.Tpo $(DEPDIR)/MoveAnimEvent.Po
#	source='src/game/MoveAnimEvent.cpp' object='MoveAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MoveAnimEvent.o `test -f 'src/game/MoveAnimEvent.cpp' || echo '$(srcdir)/'`src/game/MoveAnimEvent.cpp

MoveAnimEvent.obj: src/game/MoveAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MoveAnimEvent.obj -MD -MP -MF $(DEPDIR)/MoveAnimEvent.Tpo -c -o MoveAnimEvent.obj `if test -f 'src/game/MoveAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/MoveAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MoveAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/MoveAnimEvent.Tpo $(DEPDIR)/MoveAnimEvent.Po
#	source='src/game/MoveAnimEvent.cpp' object='MoveAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MoveAnimEvent.obj `if test -f 'src/game/MoveAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/MoveAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MoveAnimEvent.cpp'; fi`

MultiPlayerMaps.o: src/game/MultiPlayerMaps.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MultiPlayerMaps.o -MD -MP -MF $(DEPDIR)/MultiPlayerMaps.Tpo -c -o MultiPlayerMaps.o `test -f 'src/game/MultiPlayerMaps.cpp' || echo '$(srcdir)/'`src/game/MultiPlayerMaps.cpp
	$(am__mv) $(DEPDIR)/MultiPlayerMaps.Tpo $(DEPDIR)/MultiPlayerMaps.Po
#	source='src/game/MultiPlayerMaps.cpp' object='MultiPlayerMaps.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MultiPlayerMaps.o `test -f 'src/game/MultiPlayerMaps.cpp' || echo '$(srcdir)/'`src/game/MultiPlayerMaps.cpp

MultiPlayerMaps.obj: src/game/MultiPlayerMaps.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MultiPlayerMaps.obj -MD -MP -MF $(DEPDIR)/MultiPlayerMaps.Tpo -c -o MultiPlayerMaps.obj `if test -f 'src/game/MultiPlayerMaps.cpp'; then $(CYGPATH_W) 'src/game/MultiPlayerMaps.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MultiPlayerMaps.cpp'; fi`
	$(am__mv) $(DEPDIR)/MultiPlayerMaps.Tpo $(DEPDIR)/MultiPlayerMaps.Po
#	source='src/game/MultiPlayerMaps.cpp' object='MultiPlayerMaps.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MultiPlayerMaps.obj `if test -f 'src/game/MultiPlayerMaps.cpp'; then $(CYGPATH_W) 'src/game/MultiPlayerMaps.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/MultiPlayerMaps.cpp'; fi`

NoActionTriggerAction.o: src/game/NoActionTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NoActionTriggerAction.o -MD -MP -MF $(DEPDIR)/NoActionTriggerAction.Tpo -c -o NoActionTriggerAction.o `test -f 'src/game/NoActionTriggerAction.cpp' || echo '$(srcdir)/'`src/game/NoActionTriggerAction.cpp
	$(am__mv) $(DEPDIR)/NoActionTriggerAction.Tpo $(DEPDIR)/NoActionTriggerAction.Po
#	source='src/game/NoActionTriggerAction.cpp' object='NoActionTriggerAction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NoActionTriggerAction.o `test -f 'src/game/NoActionTriggerAction.cpp' || echo '$(srcdir)/'`src/game/NoActionTriggerAction.cpp

NoActionTriggerAction.obj: src/game/NoActionTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NoActionTriggerAction.obj -MD -MP -MF $(DEPDIR)/NoActionTriggerAction.Tpo -c -o NoActionTriggerAction.obj `if test -f 'src/game/NoActionTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/NoActionTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/NoActionTriggerAction.cpp'; fi`
	$(am__mv) $(DEPDIR)/NoActionTriggerAction.Tpo $(DEPDIR)/NoActionTriggerAction.Po
#	source='src/game/NoActionTriggerAction.cpp' object='NoActionTriggerAction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NoActionTriggerAction.obj `if test -f 'src/game/NoActionTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/NoActionTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/NoActionTriggerAction.cpp'; fi`

Path.o: src/game/Path.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Path.o -MD -MP -MF $(DEPDIR)/Path.Tpo -c -o Path.o `test -f 'src/game/Path.cpp' || echo '$(srcdir)/'`src/game/Path.cpp
	$(am__mv) $(DEPDIR)/Path.Tpo $(DEPDIR)/Path.Po
#	source='src/game/Path.cpp' object='Path.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Path.o `test -f 'src/game/Path.cpp' || echo '$(srcdir)/'`src/game/Path.cpp

Path.obj: src/game/Path.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Path.obj -MD -MP -MF $(DEPDIR)/Path.Tpo -c -o Path.obj `if test -f 'src/game/Path.cpp'; then $(CYGPATH_W) 'src/game/Path.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Path.cpp'; fi`
	$(am__mv) $(DEPDIR)/Path.Tpo $(DEPDIR)/Path.Po
#	source='src/game/Path.cpp' object='Path.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Path.obj `if test -f 'src/game/Path.cpp'; then $(CYGPATH_W) 'src/game/Path.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Path.cpp'; fi`

Player.o: src/game/Player.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Player.o -MD -MP -MF $(DEPDIR)/Player.Tpo -c -o Player.o `test -f 'src/game/Player.cpp' || echo '$(srcdir)/'`src/game/Player.cpp
	$(am__mv) $(DEPDIR)/Player.Tpo $(DEPDIR)/Player.Po
#	source='src/game/Player.cpp' object='Player.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Player.o `test -f 'src/game/Player.cpp' || echo '$(srcdir)/'`src/game/Player.cpp

Player.obj: src/game/Player.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Player.obj -MD -MP -MF $(DEPDIR)/Player.Tpo -c -o Player.obj `if test -f 'src/game/Player.cpp'; then $(CYGPATH_W) 'src/game/Player.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Player.cpp'; fi`
	$(am__mv) $(DEPDIR)/Player.Tpo $(DEPDIR)/Player.Po
#	source='src/game/Player.cpp' object='Player.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Player.obj `if test -f 'src/game/Player.cpp'; then $(CYGPATH_W) 'src/game/Player.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Player.cpp'; fi`

PlayerPool.o: src/game/PlayerPool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PlayerPool.o -MD -MP -MF $(DEPDIR)/PlayerPool.Tpo -c -o PlayerPool.o `test -f 'src/game/PlayerPool.cpp' || echo '$(srcdir)/'`src/game/PlayerPool.cpp
	$(am__mv) $(DEPDIR)/PlayerPool.Tpo $(DEPDIR)/PlayerPool.Po
#	source='src/game/PlayerPool.cpp' object='PlayerPool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PlayerPool.o `test -f 'src/game/PlayerPool.cpp' || echo '$(srcdir)/'`src/game/PlayerPool.cpp

PlayerPool.obj: src/game/PlayerPool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PlayerPool.obj -MD -MP -MF $(DEPDIR)/PlayerPool.Tpo -c -o PlayerPool.obj `if test -f 'src/game/PlayerPool.cpp'; then $(CYGPATH_W) 'src/game/PlayerPool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/PlayerPool.cpp'; fi`
	$(am__mv) $(DEPDIR)/PlayerPool.Tpo $(DEPDIR)/PlayerPool.Po
#	source='src/game/PlayerPool.cpp' object='PlayerPool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PlayerPool.obj `if test -f 'src/game/PlayerPool.cpp'; then $(CYGPATH_W) 'src/game/PlayerPool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/PlayerPool.cpp'; fi`

ProcAnimEvent.o: src/game/ProcAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProcAnimEvent.o -MD -MP -MF $(DEPDIR)/ProcAnimEvent.Tpo -c -o ProcAnimEvent.o `test -f 'src/game/ProcAnimEvent.cpp' || echo '$(srcdir)/'`src/game/ProcAnimEvent.cpp
	$(am__mv) $(DEPDIR)/ProcAnimEvent.Tpo $(DEPDIR)/ProcAnimEvent.Po
#	source='src/game/ProcAnimEvent.cpp' object='ProcAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProcAnimEvent.o `test -f 'src/game/ProcAnimEvent.cpp' || echo '$(srcdir)/'`src/game/ProcAnimEvent.cpp

ProcAnimEvent.obj: src/game/ProcAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProcAnimEvent.obj -MD -MP -MF $(DEPDIR)/ProcAnimEvent.Tpo -c -o ProcAnimEvent.obj `if test -f 'src/game/ProcAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/ProcAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ProcAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/ProcAnimEvent.Tpo $(DEPDIR)/ProcAnimEvent.Po
#	source='src/game/ProcAnimEvent.cpp' object='ProcAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProcAnimEvent.obj `if test -f 'src/game/ProcAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/ProcAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ProcAnimEvent.cpp'; fi`

Projectile.o: src/game/Projectile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Projectile.o -MD -MP -MF $(DEPDIR)/Projectile.Tpo -c -o Projectile.o `test -f 'src/game/Projectile.cpp' || echo '$(srcdir)/'`src/game/Projectile.cpp
	$(am__mv) $(DEPDIR)/Projectile.Tpo $(DEPDIR)/Projectile.Po
#	source='src/game/Projectile.cpp' object='Projectile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Projectile.o `test -f 'src/game/Projectile.cpp' || echo '$(srcdir)/'`src/game/Projectile.cpp

Projectile.obj: src/game/Projectile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Projectile.obj -MD -MP -MF $(DEPDIR)/Projectile.Tpo -c -o Projectile.obj `if test -f 'src/game/Projectile.cpp'; then $(CYGPATH_W) 'src/game/Projectile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Projectile.cpp'; fi`
	$(am__mv) $(DEPDIR)/Projectile.Tpo $(DEPDIR)/Projectile.Po
#	source='src/game/Projectile.cpp' object='Projectile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Projectile.obj `if test -f 'src/game/Projectile.cpp'; then $(CYGPATH_W) 'src/game/Projectile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Projectile.cpp'; fi`

ProjectileAnim.o: src/game/ProjectileAnim.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProjectileAnim.o -MD -MP -MF $(DEPDIR)/ProjectileAnim.Tpo -c -o ProjectileAnim.o `test -f 'src/game/ProjectileAnim.cpp' || echo '$(srcdir)/'`src/game/ProjectileAnim.cpp
	$(am__mv) $(DEPDIR)/ProjectileAnim.Tpo $(DEPDIR)/ProjectileAnim.Po
#	source='src/game/ProjectileAnim.cpp' object='ProjectileAnim.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProjectileAnim.o `test -f 'src/game/ProjectileAnim.cpp' || echo '$(srcdir)/'`src/game/ProjectileAnim.cpp

ProjectileAnim.obj: src/game/ProjectileAnim.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProjectileAnim.obj -MD -MP -MF $(DEPDIR)/ProjectileAnim.Tpo -c -o ProjectileAnim.obj `if test -f 'src/game/ProjectileAnim.cpp'; then $(CYGPATH_W) 'src/game/ProjectileAnim.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ProjectileAnim.cpp'; fi`
	$(am__mv) $(DEPDIR)/ProjectileAnim.Tpo $(DEPDIR)/ProjectileAnim.Po
#	source='src/game/ProjectileAnim.cpp' object='ProjectileAnim.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProjectileAnim.obj `if test -f 'src/game/ProjectileAnim.cpp'; then $(CYGPATH_W) 'src/game/ProjectileAnim.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ProjectileAnim.cpp'; fi`

ProjectileData.o: src/game/ProjectileData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProjectileData.o -MD -MP -MF $(DEPDIR)/ProjectileData.Tpo -c -o ProjectileData.o `test -f 'src/game/ProjectileData.cpp' || echo '$(srcdir)/'`src/game/ProjectileData.cpp
	$(am__mv) $(DEPDIR)/ProjectileData.Tpo $(DEPDIR)/ProjectileData.Po
#	source='src/game/ProjectileData.cpp' object='ProjectileData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProjectileData.o `test -f 'src/game/ProjectileData.cpp' || echo '$(srcdir)/'`src/game/ProjectileData.cpp

ProjectileData.obj: src/game/ProjectileData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProjectileData.obj -MD -MP -MF $(DEPDIR)/ProjectileData.Tpo -c -o ProjectileData.obj `if test -f 'src/game/ProjectileData.cpp'; then $(CYGPATH_W) 'src/game/ProjectileData.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ProjectileData.cpp'; fi`
	$(am__mv) $(DEPDIR)/ProjectileData.Tpo $(DEPDIR)/ProjectileData.Po
#	source='src/game/ProjectileData.cpp' object='ProjectileData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProjectileData.obj `if test -f 'src/game/ProjectileData.cpp'; then $(CYGPATH_W) 'src/game/ProjectileData.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ProjectileData.cpp'; fi`

ProjectileDataList.o: src/game/ProjectileDataList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProjectileDataList.o -MD -MP -MF $(DEPDIR)/ProjectileDataList.Tpo -c -o ProjectileDataList.o `test -f 'src/game/ProjectileDataList.cpp' || echo '$(srcdir)/'`src/game/ProjectileDataList.cpp
	$(am__mv) $(DEPDIR)/ProjectileDataList.Tpo $(DEPDIR)/ProjectileDataList.Po
#	source='src/game/ProjectileDataList.cpp' object='ProjectileDataList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProjectileDataList.o `test -f 'src/game/ProjectileDataList.cpp' || echo '$(srcdir)/'`src/game/ProjectileDataList.cpp

ProjectileDataList.obj: src/game/ProjectileDataList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProjectileDataList.obj -MD -MP -MF $(DEPDIR)/ProjectileDataList.Tpo -c -o ProjectileDataList.obj `if test -f 'src/game/ProjectileDataList.cpp'; then $(CYGPATH_W) 'src/game/ProjectileDataList.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ProjectileDataList.cpp'; fi`
	$(am__mv) $(DEPDIR)/ProjectileDataList.Tpo $(DEPDIR)/ProjectileDataList.Po
#	source='src/game/ProjectileDataList.cpp' object='ProjectileDataList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProjectileDataList.obj `if test -f 'src/game/ProjectileDataList.cpp'; then $(CYGPATH_W) 'src/game/ProjectileDataList.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/ProjectileDataList.cpp'; fi`

RadarAnimEvent.o: src/game/RadarAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RadarAnimEvent.o -MD -MP -MF $(DEPDIR)/RadarAnimEvent.Tpo -c -o RadarAnimEvent.o `test -f 'src/game/RadarAnimEvent.cpp' || echo '$(srcdir)/'`src/game/RadarAnimEvent.cpp
	$(am__mv) $(DEPDIR)/RadarAnimEvent.Tpo $(DEPDIR)/RadarAnimEvent.Po
#	source='src/game/RadarAnimEvent.cpp' object='RadarAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RadarAnimEvent.o `test -f 'src/game/RadarAnimEvent.cpp' || echo '$(srcdir)/'`src/game/RadarAnimEvent.cpp

RadarAnimEvent.obj: src/game/RadarAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RadarAnimEvent.obj -MD -MP -MF $(DEPDIR)/RadarAnimEvent.Tpo -c -o RadarAnimEvent.obj `if test -f 'src/game/RadarAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/RadarAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RadarAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/RadarAnimEvent.Tpo $(DEPDIR)/RadarAnimEvent.Po
#	source='src/game/RadarAnimEvent.cpp' object='RadarAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RadarAnimEvent.obj `if test -f 'src/game/RadarAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/RadarAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RadarAnimEvent.cpp'; fi`

RawTriggerAction.o: src/game/RawTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RawTriggerAction.o -MD -MP -MF $(DEPDIR)/RawTriggerAction.Tpo -c -o RawTriggerAction.o `test -f 'src/game/RawTriggerAction.cpp' || echo '$(srcdir)/'`src/game/RawTriggerAction.cpp
	$(am__mv) $(DEPDIR)/RawTriggerAction.Tpo $(DEPDIR)/RawTriggerAction.Po
#	source='src/game/RawTriggerAction.cpp' object='RawTriggerAction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RawTriggerAction.o `test -f 'src/game/RawTriggerAction.cpp' || echo '$(srcdir)/'`src/game/RawTriggerAction.cpp

RawTriggerAction.obj: src/game/RawTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RawTriggerAction.obj -MD -MP -MF $(DEPDIR)/RawTriggerAction.Tpo -c -o RawTriggerAction.obj `if test -f 'src/game/RawTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/RawTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RawTriggerAction.cpp'; fi`
	$(am__mv) $(DEPDIR)/RawTriggerAction.Tpo $(DEPDIR)/RawTriggerAction.Po
#	source='src/game/RawTriggerAction.cpp' object='RawTriggerAction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RawTriggerAction.obj `if test -f 'src/game/RawTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/RawTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RawTriggerAction.cpp'; fi`

RedAlertDataLoader.o: src/game/RedAlertDataLoader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RedAlertDataLoader.o -MD -MP -MF $(DEPDIR)/RedAlertDataLoader.Tpo -c -o RedAlertDataLoader.o `test -f 'src/game/RedAlertDataLoader.cpp' || echo '$(srcdir)/'`src/game/RedAlertDataLoader.cpp
	$(am__mv) $(DEPDIR)/RedAlertDataLoader.Tpo $(DEPDIR)/RedAlertDataLoader.Po
#	source='src/game/RedAlertDataLoader.cpp' object='RedAlertDataLoader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RedAlertDataLoader.o `test -f 'src/game/RedAlertDataLoader.cpp' || echo '$(srcdir)/'`src/game/RedAlertDataLoader.cpp

RedAlertDataLoader.obj: src/game/RedAlertDataLoader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RedAlertDataLoader.obj -MD -MP -MF $(DEPDIR)/RedAlertDataLoader.Tpo -c -o RedAlertDataLoader.obj `if test -f 'src/game/RedAlertDataLoader.cpp'; then $(CYGPATH_W) 'src/game/RedAlertDataLoader.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RedAlertDataLoader.cpp'; fi`
	$(am__mv) $(DEPDIR)/RedAlertDataLoader.Tpo $(DEPDIR)/RedAlertDataLoader.Po
#	source='src/game/RedAlertDataLoader.cpp' object='RedAlertDataLoader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RedAlertDataLoader.obj `if test -f 'src/game/RedAlertDataLoader.cpp'; then $(CYGPATH_W) 'src/game/RedAlertDataLoader.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RedAlertDataLoader.cpp'; fi`

RefineAnimEvent.o: src/game/RefineAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RefineAnimEvent.o -MD -MP -MF $(DEPDIR)/RefineAnimEvent.Tpo -c -o RefineAnimEvent.o `test -f 'src/game/RefineAnimEvent.cpp' || echo '$(srcdir)/'`src/game/RefineAnimEvent.cpp
	$(am__mv) $(DEPDIR)/RefineAnimEvent.Tpo $(DEPDIR)/RefineAnimEvent.Po
#	source='src/game/RefineAnimEvent.cpp' object='RefineAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RefineAnimEvent.o `test -f 'src/game/RefineAnimEvent.cpp' || echo '$(srcdir)/'`src/game/RefineAnimEvent.cpp

RefineAnimEvent.obj: src/game/RefineAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RefineAnimEvent.obj -MD -MP -MF $(DEPDIR)/RefineAnimEvent.Tpo -c -o RefineAnimEvent.obj `if test -f 'src/game/RefineAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/RefineAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RefineAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/RefineAnimEvent.Tpo $(DEPDIR)/RefineAnimEvent.Po
#	source='src/game/RefineAnimEvent.cpp' object='RefineAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RefineAnimEvent.obj `if test -f 'src/game/RefineAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/RefineAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RefineAnimEvent.cpp'; fi`

RepairAnimEvent.o: src/game/RepairAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RepairAnimEvent.o -MD -MP -MF $(DEPDIR)/RepairAnimEvent.Tpo -c -o RepairAnimEvent.o `test -f 'src/game/RepairAnimEvent.cpp' || echo '$(srcdir)/'`src/game/RepairAnimEvent.cpp
	$(am__mv) $(DEPDIR)/RepairAnimEvent.Tpo $(DEPDIR)/RepairAnimEvent.Po
#	source='src/game/RepairAnimEvent.cpp' object='RepairAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RepairAnimEvent.o `test -f 'src/game/RepairAnimEvent.cpp' || echo '$(srcdir)/'`src/game/RepairAnimEvent.cpp

RepairAnimEvent.obj: src/game/RepairAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RepairAnimEvent.obj -MD -MP -MF $(DEPDIR)/RepairAnimEvent.Tpo -c -o RepairAnimEvent.obj `if test -f 'src/game/RepairAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/RepairAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RepairAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/RepairAnimEvent.Tpo $(DEPDIR)/RepairAnimEvent.Po
#	source='src/game/RepairAnimEvent.cpp' object='RepairAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RepairAnimEvent.obj `if test -f 'src/game/RepairAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/RepairAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/RepairAnimEvent.cpp'; fi`

SnowMissionTheater.o: src/game/SnowMissionTheater.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SnowMissionTheater.o -MD -MP -MF $(DEPDIR)/SnowMissionTheater.Tpo -c -o SnowMissionTheater.o `test -f 'src/game/SnowMissionTheater.cpp' || echo '$(srcdir)/'`src/game/SnowMissionTheater.cpp
	$(am__mv) $(DEPDIR)/SnowMissionTheater.Tpo $(DEPDIR)/SnowMissionTheater.Po
#	source='src/game/SnowMissionTheater.cpp' object='SnowMissionTheater.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SnowMissionTheater.o `test -f 'src/game/SnowMissionTheater.cpp' || echo '$(srcdir)/'`src/game/SnowMissionTheater.cpp

SnowMissionTheater.obj: src/game/SnowMissionTheater.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SnowMissionTheater.obj -MD -MP -MF $(DEPDIR)/SnowMissionTheater.Tpo -c -o SnowMissionTheater.obj `if test -f 'src/game/SnowMissionTheater.cpp'; then $(CYGPATH_W) 'src/game/SnowMissionTheater.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/SnowMissionTheater.cpp'; fi`
	$(am__mv) $(DEPDIR)/SnowMissionTheater.Tpo $(DEPDIR)/SnowMissionTheater.Po
#	source='src/game/SnowMissionTheater.cpp' object='SnowMissionTheater.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SnowMissionTheater.obj `if test -f 'src/game/SnowMissionTheater.cpp'; then $(CYGPATH_W) 'src/game/SnowMissionTheater.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/SnowMissionTheater.cpp'; fi`

Structure.o: src/game/Structure.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Structure.o -MD -MP -MF $(DEPDIR)/Structure.Tpo -c -o Structure.o `test -f 'src/game/Structure.cpp' || echo '$(srcdir)/'`src/game/Structure.cpp
	$(am__mv) $(DEPDIR)/Structure.Tpo $(DEPDIR)/Structure.Po
#	source='src/game/Structure.cpp' object='Structure.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Structure.o `test -f 'src/game/Structure.cpp' || echo '$(srcdir)/'`src/game/Structure.cpp

Structure.obj: src/game/Structure.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Structure.obj -MD -MP -MF $(DEPDIR)/Structure.Tpo -c -o Structure.obj `if test -f 'src/game/Structure.cpp'; then $(CYGPATH_W) 'src/game/Structure.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Structure.cpp'; fi`
	$(am__mv) $(DEPDIR)/Structure.Tpo $(DEPDIR)/Structure.Po
#	source='src/game/Structure.cpp' object='Structure.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Structure.obj `if test -f 'src/game/Structure.cpp'; then $(CYGPATH_W) 'src/game/Structure.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Structure.cpp'; fi`

StructureType.o: src/game/StructureType.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StructureType.o -MD -MP -MF $(DEPDIR)/StructureType.Tpo -c -o StructureType.o `test -f 'src/game/StructureType.cpp' || echo '$(srcdir)/'`src/game/StructureType.cpp
	$(am__mv) $(DEPDIR)/StructureType.Tpo $(DEPDIR)/StructureType.Po
#	source='src/game/StructureType.cpp' object='StructureType.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StructureType.o `test -f 'src/game/StructureType.cpp' || echo '$(srcdir)/'`src/game/StructureType.cpp

StructureType.obj: src/game/StructureType.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StructureType.obj -MD -MP -MF $(DEPDIR)/StructureType.Tpo -c -o StructureType.obj `if test -f 'src/game/StructureType.cpp'; then $(CYGPATH_W) 'src/game/StructureType.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/StructureType.cpp'; fi`
	$(am__mv) $(DEPDIR)/StructureType.Tpo $(DEPDIR)/StructureType.Po
#	source='src/game/StructureType.cpp' object='StructureType.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StructureType.obj `if test -f 'src/game/StructureType.cpp'; then $(CYGPATH_W) 'src/game/StructureType.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/StructureType.cpp'; fi`

talkback.o: src/game/talkback.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT talkback.o -MD -MP -MF $(DEPDIR)/talkback.Tpo -c -o talkback.o `test -f 'src/game/talkback.cpp' || echo '$(srcdir)/'`src/game/talkback.cpp
	$(am__mv) $(DEPDIR)/talkback.Tpo $(DEPDIR)/talkback.Po
#	source='src/game/talkback.cpp' object='talkback.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o talkback.o `test -f 'src/game/talkback.cpp' || echo '$(srcdir)/'`src/game/talkback.cpp

talkback.obj: src/game/talkback.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT talkback.obj -MD -MP -MF $(DEPDIR)/talkback.Tpo -c -o talkback.obj `if test -f 'src/game/talkback.cpp'; then $(CYGPATH_W) 'src/game/talkback.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/talkback.cpp'; fi`
	$(am__mv) $(DEPDIR)/talkback.Tpo $(DEPDIR)/talkback.Po
#	source='src/game/talkback.cpp' object='talkback.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o talkback.obj `if test -f 'src/game/talkback.cpp'; then $(CYGPATH_W) 'src/game/talkback.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/talkback.cpp'; fi`

TextTriggerAction.o: src/game/TextTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TextTriggerAction.o -MD -MP -MF $(DEPDIR)/TextTriggerAction.Tpo -c -o TextTriggerAction.o `test -f 'src/game/TextTriggerAction.cpp' || echo '$(srcdir)/'`src/game/TextTriggerAction.cpp
	$(am__mv) $(DEPDIR)/TextTriggerAction.Tpo $(DEPDIR)/TextTriggerAction.Po
#	source='src/game/TextTriggerAction.cpp' object='TextTriggerAction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TextTriggerAction.o `test -f 'src/game/TextTriggerAction.cpp' || echo '$(srcdir)/'`src/game/TextTriggerAction.cpp

TextTriggerAction.obj: src/game/TextTriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TextTriggerAction.obj -MD -MP -MF $(DEPDIR)/TextTriggerAction.Tpo -c -o TextTriggerAction.obj `if test -f 'src/game/TextTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/TextTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/TextTriggerAction.cpp'; fi`
	$(am__mv) $(DEPDIR)/TextTriggerAction.Tpo $(DEPDIR)/TextTriggerAction.Po
#	source='src/game/TextTriggerAction.cpp' object='TextTriggerAction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TextTriggerAction.obj `if test -f 'src/game/TextTriggerAction.cpp'; then $(CYGPATH_W) 'src/game/TextTriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/TextTriggerAction.cpp'; fi`

Trigger.o: src/game/Trigger.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Trigger.o -MD -MP -MF $(DEPDIR)/Trigger.Tpo -c -o Trigger.o `test -f 'src/game/Trigger.cpp' || echo '$(srcdir)/'`src/game/Trigger.cpp
	$(am__mv) $(DEPDIR)/Trigger.Tpo $(DEPDIR)/Trigger.Po
#	source='src/game/Trigger.cpp' object='Trigger.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Trigger.o `test -f 'src/game/Trigger.cpp' || echo '$(srcdir)/'`src/game/Trigger.cpp

Trigger.obj: src/game/Trigger.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Trigger.obj -MD -MP -MF $(DEPDIR)/Trigger.Tpo -c -o Trigger.obj `if test -f 'src/game/Trigger.cpp'; then $(CYGPATH_W) 'src/game/Trigger.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Trigger.cpp'; fi`
	$(am__mv) $(DEPDIR)/Trigger.Tpo $(DEPDIR)/Trigger.Po
#	source='src/game/Trigger.cpp' object='Trigger.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Trigger.obj `if test -f 'src/game/Trigger.cpp'; then $(CYGPATH_W) 'src/game/Trigger.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Trigger.cpp'; fi`

TriggerAction.o: src/game/TriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TriggerAction.o -MD -MP -MF $(DEPDIR)/TriggerAction.Tpo -c -o TriggerAction.o `test -f 'src/game/TriggerAction.cpp' || echo '$(srcdir)/'`src/game/TriggerAction.cpp
	$(am__mv) $(DEPDIR)/TriggerAction.Tpo $(DEPDIR)/TriggerAction.Po
#	source='src/game/TriggerAction.cpp' object='TriggerAction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TriggerAction.o `test -f 'src/game/TriggerAction.cpp' || echo '$(srcdir)/'`src/game/TriggerAction.cpp

TriggerAction.obj: src/game/TriggerAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TriggerAction.obj -MD -MP -MF $(DEPDIR)/TriggerAction.Tpo -c -o TriggerAction.obj `if test -f 'src/game/TriggerAction.cpp'; then $(CYGPATH_W) 'src/game/TriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/TriggerAction.cpp'; fi`
	$(am__mv) $(DEPDIR)/TriggerAction.Tpo $(DEPDIR)/TriggerAction.Po
#	source='src/game/TriggerAction.cpp' object='TriggerAction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TriggerAction.obj `if test -f 'src/game/TriggerAction.cpp'; then $(CYGPATH_W) 'src/game/TriggerAction.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/TriggerAction.cpp'; fi`

TriggerManager.o: src/game/TriggerManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TriggerManager.o -MD -MP -MF $(DEPDIR)/TriggerManager.Tpo -c -o TriggerManager.o `test -f 'src/game/TriggerManager.cpp' || echo '$(srcdir)/'`src/game/TriggerManager.cpp
	$(am__mv) $(DEPDIR)/TriggerManager.Tpo $(DEPDIR)/TriggerManager.Po
#	source='src/game/TriggerManager.cpp' object='TriggerManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TriggerManager.o `test -f 'src/game/TriggerManager.cpp' || echo '$(srcdir)/'`src/game/TriggerManager.cpp

TriggerManager.obj: src/game/TriggerManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TriggerManager.obj -MD -MP -MF $(DEPDIR)/TriggerManager.Tpo -c -o TriggerManager.obj `if test -f 'src/game/TriggerManager.cpp'; then $(CYGPATH_W) 'src/game/TriggerManager.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/TriggerManager.cpp'; fi`
	$(am__mv) $(DEPDIR)/TriggerManager.Tpo $(DEPDIR)/TriggerManager.Po
#	source='src/game/TriggerManager.cpp' object='TriggerManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TriggerManager.obj `if test -f 'src/game/TriggerManager.cpp'; then $(CYGPATH_W) 'src/game/TriggerManager.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/TriggerManager.cpp'; fi`

triggers.o: src/game/triggers.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT triggers.o -MD -MP -MF $(DEPDIR)/triggers.Tpo -c -o triggers.o `test -f 'src/game/triggers.cpp' || echo '$(srcdir)/'`src/game/triggers.cpp
	$(am__mv) $(DEPDIR)/triggers.Tpo $(DEPDIR)/triggers.Po
#	source='src/game/triggers.cpp' object='triggers.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o triggers.o `test -f 'src/game/triggers.cpp' || echo '$(srcdir)/'`src/game/triggers.cpp

triggers.obj: src/game/triggers.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT triggers.obj -MD -MP -MF $(DEPDIR)/triggers.Tpo -c -o triggers.obj `if test -f 'src/game/triggers.cpp'; then $(CYGPATH_W) 'src/game/triggers.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/triggers.cpp'; fi`
	$(am__mv) $(DEPDIR)/triggers.Tpo $(DEPDIR)/triggers.Po
#	source='src/game/triggers.cpp' object='triggers.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o triggers.obj `if test -f 'src/game/triggers.cpp'; then $(CYGPATH_W) 'src/game/triggers.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/triggers.cpp'; fi`

TurnAnimEvent.o: src/game/TurnAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TurnAnimEvent.o -MD -MP -MF $(DEPDIR)/TurnAnimEvent.Tpo -c -o TurnAnimEvent.o `test -f 'src/game/TurnAnimEvent.cpp' || echo '$(srcdir)/'`src/game/TurnAnimEvent.cpp
	$(am__mv) $(DEPDIR)/TurnAnimEvent.Tpo $(DEPDIR)/TurnAnimEvent.Po
#	source='src/game/TurnAnimEvent.cpp' object='TurnAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TurnAnimEvent.o `test -f 'src/game/TurnAnimEvent.cpp' || echo '$(srcdir)/'`src/game/TurnAnimEvent.cpp

TurnAnimEvent.obj: src/game/TurnAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TurnAnimEvent.obj -MD -MP -MF $(DEPDIR)/TurnAnimEvent.Tpo -c -o TurnAnimEvent.obj `if test -f 'src/game/TurnAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/TurnAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/TurnAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/TurnAnimEvent.Tpo $(DEPDIR)/TurnAnimEvent.Po
#	source='src/game/TurnAnimEvent.cpp' object='TurnAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TurnAnimEvent.obj `if test -f 'src/game/TurnAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/TurnAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/TurnAnimEvent.cpp'; fi`

UAttackAnimEvent.o: src/game/UAttackAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UAttackAnimEvent.o -MD -MP -MF $(DEPDIR)/UAttackAnimEvent.Tpo -c -o UAttackAnimEvent.o `test -f 'src/game/UAttackAnimEvent.cpp' || echo '$(srcdir)/'`src/game/UAttackAnimEvent.cpp
	$(am__mv) $(DEPDIR)/UAttackAnimEvent.Tpo $(DEPDIR)/UAttackAnimEvent.Po
#	source='src/game/UAttackAnimEvent.cpp' object='UAttackAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UAttackAnimEvent.o `test -f 'src/game/UAttackAnimEvent.cpp' || echo '$(srcdir)/'`src/game/UAttackAnimEvent.cpp

UAttackAnimEvent.obj: src/game/UAttackAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UAttackAnimEvent.obj -MD -MP -MF $(DEPDIR)/UAttackAnimEvent.Tpo -c -o UAttackAnimEvent.obj `if test -f 'src/game/UAttackAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/UAttackAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UAttackAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/UAttackAnimEvent.Tpo $(DEPDIR)/UAttackAnimEvent.Po
#	source='src/game/UAttackAnimEvent.cpp' object='UAttackAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UAttackAnimEvent.obj `if test -f 'src/game/UAttackAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/UAttackAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UAttackAnimEvent.cpp'; fi`

UHarvestEvent.o: src/game/UHarvestEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UHarvestEvent.o -MD -MP -MF $(DEPDIR)/UHarvestEvent.Tpo -c -o UHarvestEvent.o `test -f 'src/game/UHarvestEvent.cpp' || echo '$(srcdir)/'`src/game/UHarvestEvent.cpp
	$(am__mv) $(DEPDIR)/UHarvestEvent.Tpo $(DEPDIR)/UHarvestEvent.Po
#	source='src/game/UHarvestEvent.cpp' object='UHarvestEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UHarvestEvent.o `test -f 'src/game/UHarvestEvent.cpp' || echo '$(srcdir)/'`src/game/UHarvestEvent.cpp

UHarvestEvent.obj: src/game/UHarvestEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UHarvestEvent.obj -MD -MP -MF $(DEPDIR)/UHarvestEvent.Tpo -c -o UHarvestEvent.obj `if test -f 'src/game/UHarvestEvent.cpp'; then $(CYGPATH_W) 'src/game/UHarvestEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UHarvestEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/UHarvestEvent.Tpo $(DEPDIR)/UHarvestEvent.Po
#	source='src/game/UHarvestEvent.cpp' object='UHarvestEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UHarvestEvent.obj `if test -f 'src/game/UHarvestEvent.cpp'; then $(CYGPATH_W) 'src/game/UHarvestEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UHarvestEvent.cpp'; fi`

UInfiltrateAnimEvent.o: src/game/UInfiltrateAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UInfiltrateAnimEvent.o -MD -MP -MF $(DEPDIR)/UInfiltrateAnimEvent.Tpo -c -o UInfiltrateAnimEvent.o `test -f 'src/game/UInfiltrateAnimEvent.cpp' || echo '$(srcdir)/'`src/game/UInfiltrateAnimEvent.cpp
	$(am__mv) $(DEPDIR)/UInfiltrateAnimEvent.Tpo $(DEPDIR)/UInfiltrateAnimEvent.Po
#	source='src/game/UInfiltrateAnimEvent.cpp' object='UInfiltrateAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UInfiltrateAnimEvent.o `test -f 'src/game/UInfiltrateAnimEvent.cpp' || echo '$(srcdir)/'`src/game/UInfiltrateAnimEvent.cpp

UInfiltrateAnimEvent.obj: src/game/UInfiltrateAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UInfiltrateAnimEvent.obj -MD -MP -MF $(DEPDIR)/UInfiltrateAnimEvent.Tpo -c -o UInfiltrateAnimEvent.obj `if test -f 'src/game/UInfiltrateAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/UInfiltrateAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UInfiltrateAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/UInfiltrateAnimEvent.Tpo $(DEPDIR)/UInfiltrateAnimEvent.Po
#	source='src/game/UInfiltrateAnimEvent.cpp' object='UInfiltrateAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UInfiltrateAnimEvent.obj `if test -f 'src/game/UInfiltrateAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/UInfiltrateAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UInfiltrateAnimEvent.cpp'; fi`

Unit.o: src/game/Unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Unit.o -MD -MP -MF $(DEPDIR)/Unit.Tpo -c -o Unit.o `test -f 'src/game/Unit.cpp' || echo '$(srcdir)/'`src/game/Unit.cpp
	$(am__mv) $(DEPDIR)/Unit.Tpo $(DEPDIR)/Unit.Po
#	source='src/game/Unit.cpp' object='Unit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Unit.o `test -f 'src/game/Unit.cpp' || echo '$(srcdir)/'`src/game/Unit.cpp

Unit.obj: src/game/Unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Unit.obj -MD -MP -MF $(DEPDIR)/Unit.Tpo -c -o Unit.obj `if test -f 'src/game/Unit.cpp'; then $(CYGPATH_W) 'src/game/Unit.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Unit.cpp'; fi`
	$(am__mv) $(DEPDIR)/Unit.Tpo $(DEPDIR)/Unit.Po
#	source='src/game/Unit.cpp' object='Unit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Unit.obj `if test -f 'src/game/Unit.cpp'; then $(CYGPATH_W) 'src/game/Unit.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Unit.cpp'; fi`

unitandstructurepool.o: src/game/unitandstructurepool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT unitandstructurepool.o -MD -MP -MF $(DEPDIR)/unitandstructurepool.Tpo -c -o unitandstructurepool.o `test -f 'src/game/unitandstructurepool.cpp' || echo '$(srcdir)/'`src/game/unitandstructurepool.cpp
	$(am__mv) $(DEPDIR)/unitandstructurepool.Tpo $(DEPDIR)/unitandstructurepool.Po
#	source='src/game/unitandstructurepool.cpp' object='unitandstructurepool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o unitandstructurepool.o `test -f 'src/game/unitandstructurepool.cpp' || echo '$(srcdir)/'`src/game/unitandstructurepool.cpp

unitandstructurepool.obj: src/game/unitandstructurepool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT unitandstructurepool.obj -MD -MP -MF $(DEPDIR)/unitandstructurepool.Tpo -c -o unitandstructurepool.obj `if test -f 'src/game/unitandstructurepool.cpp'; then $(CYGPATH_W) 'src/game/unitandstructurepool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/unitandstructurepool.cpp'; fi`
	$(am__mv) $(DEPDIR)/unitandstructurepool.Tpo $(DEPDIR)/unitandstructurepool.Po
#	source='src/game/unitandstructurepool.cpp' object='unitandstructurepool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o unitandstructurepool.obj `if test -f 'src/game/unitandstructurepool.cpp'; then $(CYGPATH_W) 'src/game/unitandstructurepool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/unitandstructurepool.cpp'; fi`

UnitAnimEvent.o: src/game/UnitAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UnitAnimEvent.o -MD -MP -MF $(DEPDIR)/UnitAnimEvent.Tpo -c -o UnitAnimEvent.o `test -f 'src/game/UnitAnimEvent.cpp' || echo '$(srcdir)/'`src/game/UnitAnimEvent.cpp
	$(am__mv) $(DEPDIR)/UnitAnimEvent.Tpo $(DEPDIR)/UnitAnimEvent.Po
#	source='src/game/UnitAnimEvent.cpp' object='UnitAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UnitAnimEvent.o `test -f 'src/game/UnitAnimEvent.cpp' || echo '$(srcdir)/'`src/game/UnitAnimEvent.cpp

UnitAnimEvent.obj: src/game/UnitAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UnitAnimEvent.obj -MD -MP -MF $(DEPDIR)/UnitAnimEvent.Tpo -c -o UnitAnimEvent.obj `if test -f 'src/game/UnitAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/UnitAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UnitAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/UnitAnimEvent.Tpo $(DEPDIR)/UnitAnimEvent.Po
#	source='src/game/UnitAnimEvent.cpp' object='UnitAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UnitAnimEvent.obj `if test -f 'src/game/UnitAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/UnitAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UnitAnimEvent.cpp'; fi`

UnitOrStructure.o: src/game/UnitOrStructure.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UnitOrStructure.o -MD -MP -MF $(DEPDIR)/UnitOrStructure.Tpo -c -o UnitOrStructure.o `test -f 'src/game/UnitOrStructure.cpp' || echo '$(srcdir)/'`src/game/UnitOrStructure.cpp
	$(am__mv) $(DEPDIR)/UnitOrStructure.Tpo $(DEPDIR)/UnitOrStructure.Po
#	source='src/game/UnitOrStructure.cpp' object='UnitOrStructure.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UnitOrStructure.o `test -f 'src/game/UnitOrStructure.cpp' || echo '$(srcdir)/'`src/game/UnitOrStructure.cpp

UnitOrStructure.obj: src/game/UnitOrStructure.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UnitOrStructure.obj -MD -MP -MF $(DEPDIR)/UnitOrStructure.Tpo -c -o UnitOrStructure.obj `if test -f 'src/game/UnitOrStructure.cpp'; then $(CYGPATH_W) 'src/game/UnitOrStructure.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UnitOrStructure.cpp'; fi`
	$(am__mv) $(DEPDIR)/UnitOrStructure.Tpo $(DEPDIR)/UnitOrStructure.Po
#	source='src/game/UnitOrStructure.cpp' object='UnitOrStructure.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UnitOrStructure.obj `if test -f 'src/game/UnitOrStructure.cpp'; then $(CYGPATH_W) 'src/game/UnitOrStructure.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UnitOrStructure.cpp'; fi`

UnitOrStructureType.o: src/game/UnitOrStructureType.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UnitOrStructureType.o -MD -MP -MF $(DEPDIR)/UnitOrStructureType.Tpo -c -o UnitOrStructureType.o `test -f 'src/game/UnitOrStructureType.cpp' || echo '$(srcdir)/'`src/game/UnitOrStructureType.cpp
	$(am__mv) $(DEPDIR)/UnitOrStructureType.Tpo $(DEPDIR)/UnitOrStructureType.Po
#	source='src/game/UnitOrStructureType.cpp' object='UnitOrStructureType.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UnitOrStructureType.o `test -f 'src/game/UnitOrStructureType.cpp' || echo '$(srcdir)/'`src/game/UnitOrStructureType.cpp

UnitOrStructureType.obj: src/game/UnitOrStructureType.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UnitOrStructureType.obj -MD -MP -MF $(DEPDIR)/UnitOrStructureType.Tpo -c -o UnitOrStructureType.obj `if test -f 'src/game/UnitOrStructureType.cpp'; then $(CYGPATH_W) 'src/game/UnitOrStructureType.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UnitOrStructureType.cpp'; fi`
	$(am__mv) $(DEPDIR)/UnitOrStructureType.Tpo $(DEPDIR)/UnitOrStructureType.Po
#	source='src/game/UnitOrStructureType.cpp' object='UnitOrStructureType.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UnitOrStructureType.obj `if test -f 'src/game/UnitOrStructureType.cpp'; then $(CYGPATH_W) 'src/game/UnitOrStructureType.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UnitOrStructureType.cpp'; fi`

UnitType.o: src/game/UnitType.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UnitType.o -MD -MP -MF $(DEPDIR)/UnitType.Tpo -c -o UnitType.o `test -f 'src/game/UnitType.cpp' || echo '$(srcdir)/'`src/game/UnitType.cpp
	$(am__mv) $(DEPDIR)/UnitType.Tpo $(DEPDIR)/UnitType.Po
#	source='src/game/UnitType.cpp' object='UnitType.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UnitType.o `test -f 'src/game/UnitType.cpp' || echo '$(srcdir)/'`src/game/UnitType.cpp

UnitType.obj: src/game/UnitType.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UnitType.obj -MD -MP -MF $(DEPDIR)/UnitType.Tpo -c -o UnitType.obj `if test -f 'src/game/UnitType.cpp'; then $(CYGPATH_W) 'src/game/UnitType.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UnitType.cpp'; fi`
	$(am__mv) $(DEPDIR)/UnitType.Tpo $(DEPDIR)/UnitType.Po
#	source='src/game/UnitType.cpp' object='UnitType.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UnitType.obj `if test -f 'src/game/UnitType.cpp'; then $(CYGPATH_W) 'src/game/UnitType.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/UnitType.cpp'; fi`

URepairEvent.o: src/game/URepairEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT URepairEvent.o -MD -MP -MF $(DEPDIR)/URepairEvent.Tpo -c -o URepairEvent.o `test -f 'src/game/URepairEvent.cpp' || echo '$(srcdir)/'`src/game/URepairEvent.cpp
	$(am__mv) $(DEPDIR)/URepairEvent.Tpo $(DEPDIR)/URepairEvent.Po
#	source='src/game/URepairEvent.cpp' object='URepairEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o URepairEvent.o `test -f 'src/game/URepairEvent.cpp' || echo '$(srcdir)/'`src/game/URepairEvent.cpp

URepairEvent.obj: src/game/URepairEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT URepairEvent.obj -MD -MP -MF $(DEPDIR)/URepairEvent.Tpo -c -o URepairEvent.obj `if test -f 'src/game/URepairEvent.cpp'; then $(CYGPATH_W) 'src/game/URepairEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/URepairEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/URepairEvent.Tpo $(DEPDIR)/URepairEvent.Po
#	source='src/game/URepairEvent.cpp' object='URepairEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o URepairEvent.obj `if test -f 'src/game/URepairEvent.cpp'; then $(CYGPATH_W) 'src/game/URepairEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/URepairEvent.cpp'; fi`

WalkAnimEvent.o: src/game/WalkAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WalkAnimEvent.o -MD -MP -MF $(DEPDIR)/WalkAnimEvent.Tpo -c -o WalkAnimEvent.o `test -f 'src/game/WalkAnimEvent.cpp' || echo '$(srcdir)/'`src/game/WalkAnimEvent.cpp
	$(am__mv) $(DEPDIR)/WalkAnimEvent.Tpo $(DEPDIR)/WalkAnimEvent.Po
#	source='src/game/WalkAnimEvent.cpp' object='WalkAnimEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WalkAnimEvent.o `test -f 'src/game/WalkAnimEvent.cpp' || echo '$(srcdir)/'`src/game/WalkAnimEvent.cpp

WalkAnimEvent.obj: src/game/WalkAnimEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WalkAnimEvent.obj -MD -MP -MF $(DEPDIR)/WalkAnimEvent.Tpo -c -o WalkAnimEvent.obj `if test -f 'src/game/WalkAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/WalkAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WalkAnimEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/WalkAnimEvent.Tpo $(DEPDIR)/WalkAnimEvent.Po
#	source='src/game/WalkAnimEvent.cpp' object='WalkAnimEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WalkAnimEvent.obj `if test -f 'src/game/WalkAnimEvent.cpp'; then $(CYGPATH_W) 'src/game/WalkAnimEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WalkAnimEvent.cpp'; fi`

Warhead.o: src/game/Warhead.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Warhead.o -MD -MP -MF $(DEPDIR)/Warhead.Tpo -c -o Warhead.o `test -f 'src/game/Warhead.cpp' || echo '$(srcdir)/'`src/game/Warhead.cpp
	$(am__mv) $(DEPDIR)/Warhead.Tpo $(DEPDIR)/Warhead.Po
#	source='src/game/Warhead.cpp' object='Warhead.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Warhead.o `test -f 'src/game/Warhead.cpp' || echo '$(srcdir)/'`src/game/Warhead.cpp

Warhead.obj: src/game/Warhead.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Warhead.obj -MD -MP -MF $(DEPDIR)/Warhead.Tpo -c -o Warhead.obj `if test -f 'src/game/Warhead.cpp'; then $(CYGPATH_W) 'src/game/Warhead.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Warhead.cpp'; fi`
	$(am__mv) $(DEPDIR)/Warhead.Tpo $(DEPDIR)/Warhead.Po
#	source='src/game/Warhead.cpp' object='Warhead.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Warhead.obj `if test -f 'src/game/Warhead.cpp'; then $(CYGPATH_W) 'src/game/Warhead.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Warhead.cpp'; fi`

WarheadData.o: src/game/WarheadData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WarheadData.o -MD -MP -MF $(DEPDIR)/WarheadData.Tpo -c -o WarheadData.o `test -f 'src/game/WarheadData.cpp' || echo '$(srcdir)/'`src/game/WarheadData.cpp
	$(am__mv) $(DEPDIR)/WarheadData.Tpo $(DEPDIR)/WarheadData.Po
#	source='src/game/WarheadData.cpp' object='WarheadData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WarheadData.o `test -f 'src/game/WarheadData.cpp' || echo '$(srcdir)/'`src/game/WarheadData.cpp

WarheadData.obj: src/game/WarheadData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WarheadData.obj -MD -MP -MF $(DEPDIR)/WarheadData.Tpo -c -o WarheadData.obj `if test -f 'src/game/WarheadData.cpp'; then $(CYGPATH_W) 'src/game/WarheadData.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WarheadData.cpp'; fi`
	$(am__mv) $(DEPDIR)/WarheadData.Tpo $(DEPDIR)/WarheadData.Po
#	source='src/game/WarheadData.cpp' object='WarheadData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WarheadData.obj `if test -f 'src/game/WarheadData.cpp'; then $(CYGPATH_W) 'src/game/WarheadData.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WarheadData.cpp'; fi`

WarheadDataList.o: src/game/WarheadDataList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WarheadDataList.o -MD -MP -MF $(DEPDIR)/WarheadDataList.Tpo -c -o WarheadDataList.o `test -f 'src/game/WarheadDataList.cpp' || echo '$(srcdir)/'`src/game/WarheadDataList.cpp
	$(am__mv) $(DEPDIR)/WarheadDataList.Tpo $(DEPDIR)/WarheadDataList.Po
#	source='src/game/WarheadDataList.cpp' object='WarheadDataList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WarheadDataList.o `test -f 'src/game/WarheadDataList.cpp' || echo '$(srcdir)/'`src/game/WarheadDataList.cpp

WarheadDataList.obj: src/game/WarheadDataList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WarheadDataList.obj -MD -MP -MF $(DEPDIR)/WarheadDataList.Tpo -c -o WarheadDataList.obj `if test -f 'src/game/WarheadDataList.cpp'; then $(CYGPATH_W) 'src/game/WarheadDataList.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WarheadDataList.cpp'; fi`
	$(am__mv) $(DEPDIR)/WarheadDataList.Tpo $(DEPDIR)/WarheadDataList.Po
#	source='src/game/WarheadDataList.cpp' object='WarheadDataList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WarheadDataList.obj `if test -f 'src/game/WarheadDataList.cpp'; then $(CYGPATH_W) 'src/game/WarheadDataList.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WarheadDataList.cpp'; fi`

Weapon.o: src/game/Weapon.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Weapon.o -MD -MP -MF $(DEPDIR)/Weapon.Tpo -c -o Weapon.o `test -f 'src/game/Weapon.cpp' || echo '$(srcdir)/'`src/game/Weapon.cpp
	$(am__mv) $(DEPDIR)/Weapon.Tpo $(DEPDIR)/Weapon.Po
#	source='src/game/Weapon.cpp' object='Weapon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Weapon.o `test -f 'src/game/Weapon.cpp' || echo '$(srcdir)/'`src/game/Weapon.cpp

Weapon.obj: src/game/Weapon.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Weapon.obj -MD -MP -MF $(DEPDIR)/Weapon.Tpo -c -o Weapon.obj `if test -f 'src/game/Weapon.cpp'; then $(CYGPATH_W) 'src/game/Weapon.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Weapon.cpp'; fi`
	$(am__mv) $(DEPDIR)/Weapon.Tpo $(DEPDIR)/Weapon.Po
#	source='src/game/Weapon.cpp' object='Weapon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Weapon.obj `if test -f 'src/game/Weapon.cpp'; then $(CYGPATH_W) 'src/game/Weapon.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/Weapon.cpp'; fi`

WeaponData.o: src/game/WeaponData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WeaponData.o -MD -MP -MF $(DEPDIR)/WeaponData.Tpo -c -o WeaponData.o `test -f 'src/game/WeaponData.cpp' || echo '$(srcdir)/'`src/game/WeaponData.cpp
	$(am__mv) $(DEPDIR)/WeaponData.Tpo $(DEPDIR)/WeaponData.Po
#	source='src/game/WeaponData.cpp' object='WeaponData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WeaponData.o `test -f 'src/game/WeaponData.cpp' || echo '$(srcdir)/'`src/game/WeaponData.cpp

WeaponData.obj: src/game/WeaponData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WeaponData.obj -MD -MP -MF $(DEPDIR)/WeaponData.Tpo -c -o WeaponData.obj `if test -f 'src/game/WeaponData.cpp'; then $(CYGPATH_W) 'src/game/WeaponData.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WeaponData.cpp'; fi`
	$(am__mv) $(DEPDIR)/WeaponData.Tpo $(DEPDIR)/WeaponData.Po
#	source='src/game/WeaponData.cpp' object='WeaponData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WeaponData.obj `if test -f 'src/game/WeaponData.cpp'; then $(CYGPATH_W) 'src/game/WeaponData.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WeaponData.cpp'; fi`

WeaponDataList.o: src/game/WeaponDataList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WeaponDataList.o -MD -MP -MF $(DEPDIR)/WeaponDataList.Tpo -c -o WeaponDataList.o `test -f 'src/game/WeaponDataList.cpp' || echo '$(srcdir)/'`src/game/WeaponDataList.cpp
	$(am__mv) $(DEPDIR)/WeaponDataList.Tpo $(DEPDIR)/WeaponDataList.Po
#	source='src/game/WeaponDataList.cpp' object='WeaponDataList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WeaponDataList.o `test -f 'src/game/WeaponDataList.cpp' || echo '$(srcdir)/'`src/game/WeaponDataList.cpp

WeaponDataList.obj: src/game/WeaponDataList.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WeaponDataList.obj -MD -MP -MF $(DEPDIR)/WeaponDataList.Tpo -c -o WeaponDataList.obj `if test -f 'src/game/WeaponDataList.cpp'; then $(CYGPATH_W) 'src/game/WeaponDataList.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WeaponDataList.cpp'; fi`
	$(am__mv) $(DEPDIR)/WeaponDataList.Tpo $(DEPDIR)/WeaponDataList.Po
#	source='src/game/WeaponDataList.cpp' object='WeaponDataList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WeaponDataList.obj `if test -f 'src/game/WeaponDataList.cpp'; then $(CYGPATH_W) 'src/game/WeaponDataList.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/WeaponDataList.cpp'; fi`

weaponspool.o: src/game/weaponspool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT weaponspool.o -MD -MP -MF $(DEPDIR)/weaponspool.Tpo -c -o weaponspool.o `test -f 'src/game/weaponspool.cpp' || echo '$(srcdir)/'`src/game/weaponspool.cpp
	$(am__mv) $(DEPDIR)/weaponspool.Tpo $(DEPDIR)/weaponspool.Po
#	source='src/game/weaponspool.cpp' object='weaponspool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o weaponspool.o `test -f 'src/game/weaponspool.cpp' || echo '$(srcdir)/'`src/game/weaponspool.cpp

weaponspool.obj: src/game/weaponspool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT weaponspool.obj -MD -MP -MF $(DEPDIR)/weaponspool.Tpo -c -o weaponspool.obj `if test -f 'src/game/weaponspool.cpp'; then $(CYGPATH_W) 'src/game/weaponspool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/weaponspool.cpp'; fi`
	$(am__mv) $(DEPDIR)/weaponspool.Tpo $(DEPDIR)/weaponspool.Po
#	source='src/game/weaponspool.cpp' object='weaponspool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o weaponspool.obj `if test -f 'src/game/weaponspool.cpp'; then $(CYGPATH_W) 'src/game/weaponspool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/game/weaponspool.cpp'; fi`

args.o: src/misc/args.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT args.o -MD -MP -MF $(DEPDIR)/args.Tpo -c -o args.o `test -f 'src/misc/args.cpp' || echo '$(srcdir)/'`src/misc/args.cpp
	$(am__mv) $(DEPDIR)/args.Tpo $(DEPDIR)/args.Po
#	source='src/misc/args.cpp' object='args.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o args.o `test -f 'src/misc/args.cpp' || echo '$(srcdir)/'`src/misc/args.cpp

args.obj: src/misc/args.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT args.obj -MD -MP -MF $(DEPDIR)/args.Tpo -c -o args.obj `if test -f 'src/misc/args.cpp'; then $(CYGPATH_W) 'src/misc/args.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/args.cpp'; fi`
	$(am__mv) $(DEPDIR)/args.Tpo $(DEPDIR)/args.Po
#	source='src/misc/args.cpp' object='args.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o args.obj `if test -f 'src/misc/args.cpp'; then $(CYGPATH_W) 'src/misc/args.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/args.cpp'; fi`

common.o: src/misc/common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT common.o -MD -MP -MF $(DEPDIR)/common.Tpo -c -o common.o `test -f 'src/misc/common.cpp' || echo '$(srcdir)/'`src/misc/common.cpp
	$(am__mv) $(DEPDIR)/common.Tpo $(DEPDIR)/common.Po
#	source='src/misc/common.cpp' object='common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o common.o `test -f 'src/misc/common.cpp' || echo '$(srcdir)/'`src/misc/common.cpp

common.obj: src/misc/common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT common.obj -MD -MP -MF $(DEPDIR)/common.Tpo -c -o common.obj `if test -f 'src/misc/common.cpp'; then $(CYGPATH_W) 'src/misc/common.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/common.cpp'; fi`
	$(am__mv) $(DEPDIR)/common.Tpo $(DEPDIR)/common.Po
#	source='src/misc/common.cpp' object='common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o common.obj `if test -f 'src/misc/common.cpp'; then $(CYGPATH_W) 'src/misc/common.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/common.cpp'; fi`

Compression.o: src/misc/Compression.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Compression.o -MD -MP -MF $(DEPDIR)/Compression.Tpo -c -o Compression.o `test -f 'src/misc/Compression.cpp' || echo '$(srcdir)/'`src/misc/Compression.cpp
	$(am__mv) $(DEPDIR)/Compression.Tpo $(DEPDIR)/Compression.Po
#	source='src/misc/Compression.cpp' object='Compression.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Compression.o `test -f 'src/misc/Compression.cpp' || echo '$(srcdir)/'`src/misc/Compression.cpp

Compression.obj: src/misc/Compression.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Compression.obj -MD -MP -MF $(DEPDIR)/Compression.Tpo -c -o Compression.obj `if test -f 'src/misc/Compression.cpp'; then $(CYGPATH_W) 'src/misc/Compression.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/Compression.cpp'; fi`
	$(am__mv) $(DEPDIR)/Compression.Tpo $(DEPDIR)/Compression.Po
#	source='src/misc/Compression.cpp' object='Compression.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Compression.obj `if test -f 'src/misc/Compression.cpp'; then $(CYGPATH_W) 'src/misc/Compression.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/Compression.cpp'; fi`

fibheap.o: src/misc/fibheap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fibheap.o -MD -MP -MF $(DEPDIR)/fibheap.Tpo -c -o fibheap.o `test -f 'src/misc/fibheap.cpp' || echo '$(srcdir)/'`src/misc/fibheap.cpp
	$(am__mv) $(DEPDIR)/fibheap.Tpo $(DEPDIR)/fibheap.Po
#	source='src/misc/fibheap.cpp' object='fibheap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fibheap.o `test -f 'src/misc/fibheap.cpp' || echo '$(srcdir)/'`src/misc/fibheap.cpp

fibheap.obj: src/misc/fibheap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fibheap.obj -MD -MP -MF $(DEPDIR)/fibheap.Tpo -c -o fibheap.obj `if test -f 'src/misc/fibheap.cpp'; then $(CYGPATH_W) 'src/misc/fibheap.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/fibheap.cpp'; fi`
	$(am__mv) $(DEPDIR)/fibheap.Tpo $(DEPDIR)/fibheap.Po
#	source='src/misc/fibheap.cpp' object='fibheap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fibheap.obj `if test -f 'src/misc/fibheap.cpp'; then $(CYGPATH_W) 'src/misc/fibheap.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/fibheap.cpp'; fi`

INIFile.o: src/misc/INIFile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT INIFile.o -MD -MP -MF $(DEPDIR)/INIFile.Tpo -c -o INIFile.o `test -f 'src/misc/INIFile.cpp' || echo '$(srcdir)/'`src/misc/INIFile.cpp
	$(am__mv) $(DEPDIR)/INIFile.Tpo $(DEPDIR)/INIFile.Po
#	source='src/misc/INIFile.cpp' object='INIFile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o INIFile.o `test -f 'src/misc/INIFile.cpp' || echo '$(srcdir)/'`src/misc/INIFile.cpp

INIFile.obj: src/misc/INIFile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT INIFile.obj -MD -MP -MF $(DEPDIR)/INIFile.Tpo -c -o INIFile.obj `if test -f 'src/misc/INIFile.cpp'; then $(CYGPATH_W) 'src/misc/INIFile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/INIFile.cpp'; fi`
	$(am__mv) $(DEPDIR)/INIFile.Tpo $(DEPDIR)/INIFile.Po
#	source='src/misc/INIFile.cpp' object='INIFile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o INIFile.obj `if test -f 'src/misc/INIFile.cpp'; then $(CYGPATH_W) 'src/misc/INIFile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/INIFile.cpp'; fi`

KeyNotFound.o: src/misc/KeyNotFound.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyNotFound.o -MD -MP -MF $(DEPDIR)/KeyNotFound.Tpo -c -o KeyNotFound.o `test -f 'src/misc/KeyNotFound.cpp' || echo '$(srcdir)/'`src/misc/KeyNotFound.cpp
	$(am__mv) $(DEPDIR)/KeyNotFound.Tpo $(DEPDIR)/KeyNotFound.Po
#	source='src/misc/KeyNotFound.cpp' object='KeyNotFound.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyNotFound.o `test -f 'src/misc/KeyNotFound.cpp' || echo '$(srcdir)/'`src/misc/KeyNotFound.cpp

KeyNotFound.obj: src/misc/KeyNotFound.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyNotFound.obj -MD -MP -MF $(DEPDIR)/KeyNotFound.Tpo -c -o KeyNotFound.obj `if test -f 'src/misc/KeyNotFound.cpp'; then $(CYGPATH_W) 'src/misc/KeyNotFound.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/KeyNotFound.cpp'; fi`
	$(am__mv) $(DEPDIR)/KeyNotFound.Tpo $(DEPDIR)/KeyNotFound.Po
#	source='src/misc/KeyNotFound.cpp' object='KeyNotFound.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyNotFound.obj `if test -f 'src/misc/KeyNotFound.cpp'; then $(CYGPATH_W) 'src/misc/KeyNotFound.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/KeyNotFound.cpp'; fi`

StringTableFile.o: src/misc/StringTableFile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StringTableFile.o -MD -MP -MF $(DEPDIR)/StringTableFile.Tpo -c -o StringTableFile.o `test -f 'src/misc/StringTableFile.cpp' || echo '$(srcdir)/'`src/misc/StringTableFile.cpp
	$(am__mv) $(DEPDIR)/StringTableFile.Tpo $(DEPDIR)/StringTableFile.Po
#	source='src/misc/StringTableFile.cpp' object='StringTableFile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StringTableFile.o `test -f 'src/misc/StringTableFile.cpp' || echo '$(srcdir)/'`src/misc/StringTableFile.cpp

StringTableFile.obj: src/misc/StringTableFile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StringTableFile.obj -MD -MP -MF $(DEPDIR)/StringTableFile.Tpo -c -o StringTableFile.obj `if test -f 'src/misc/StringTableFile.cpp'; then $(CYGPATH_W) 'src/misc/StringTableFile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/StringTableFile.cpp'; fi`
	$(am__mv) $(DEPDIR)/StringTableFile.Tpo $(DEPDIR)/StringTableFile.Po
#	source='src/misc/StringTableFile.cpp' object='StringTableFile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StringTableFile.obj `if test -f 'src/misc/StringTableFile.cpp'; then $(CYGPATH_W) 'src/misc/StringTableFile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/misc/StringTableFile.cpp'; fi`

Button.o: src/ui/Button.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Button.o -MD -MP -MF $(DEPDIR)/Button.Tpo -c -o Button.o `test -f 'src/ui/Button.cpp' || echo '$(srcdir)/'`src/ui/Button.cpp
	$(am__mv) $(DEPDIR)/Button.Tpo $(DEPDIR)/Button.Po
#	source='src/ui/Button.cpp' object='Button.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Button.o `test -f 'src/ui/Button.cpp' || echo '$(srcdir)/'`src/ui/Button.cpp

Button.obj: src/ui/Button.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Button.obj -MD -MP -MF $(DEPDIR)/Button.Tpo -c -o Button.obj `if test -f 'src/ui/Button.cpp'; then $(CYGPATH_W) 'src/ui/Button.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Button.cpp'; fi`
	$(am__mv) $(DEPDIR)/Button.Tpo $(DEPDIR)/Button.Po
#	source='src/ui/Button.cpp' object='Button.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Button.obj `if test -f 'src/ui/Button.cpp'; then $(CYGPATH_W) 'src/ui/Button.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Button.cpp'; fi`

Cursor.o: src/ui/Cursor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Cursor.o -MD -MP -MF $(DEPDIR)/Cursor.Tpo -c -o Cursor.o `test -f 'src/ui/Cursor.cpp' || echo '$(srcdir)/'`src/ui/Cursor.cpp
	$(am__mv) $(DEPDIR)/Cursor.Tpo $(DEPDIR)/Cursor.Po
#	source='src/ui/Cursor.cpp' object='Cursor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Cursor.o `test -f 'src/ui/Cursor.cpp' || echo '$(srcdir)/'`src/ui/Cursor.cpp

Cursor.obj: src/ui/Cursor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Cursor.obj -MD -MP -MF $(DEPDIR)/Cursor.Tpo -c -o Cursor.obj `if test -f 'src/ui/Cursor.cpp'; then $(CYGPATH_W) 'src/ui/Cursor.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Cursor.cpp'; fi`
	$(am__mv) $(DEPDIR)/Cursor.Tpo $(DEPDIR)/Cursor.Po
#	source='src/ui/Cursor.cpp' object='Cursor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Cursor.obj `if test -f 'src/ui/Cursor.cpp'; then $(CYGPATH_W) 'src/ui/Cursor.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Cursor.cpp'; fi`

CursorInfo.o: src/ui/CursorInfo.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CursorInfo.o -MD -MP -MF $(DEPDIR)/CursorInfo.Tpo -c -o CursorInfo.o `test -f 'src/ui/CursorInfo.cpp' || echo '$(srcdir)/'`src/ui/CursorInfo.cpp
	$(am__mv) $(DEPDIR)/CursorInfo.Tpo $(DEPDIR)/CursorInfo.Po
#	source='src/ui/CursorInfo.cpp' object='CursorInfo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CursorInfo.o `test -f 'src/ui/CursorInfo.cpp' || echo '$(srcdir)/'`src/ui/CursorInfo.cpp

CursorInfo.obj: src/ui/CursorInfo.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CursorInfo.obj -MD -MP -MF $(DEPDIR)/CursorInfo.Tpo -c -o CursorInfo.obj `if test -f 'src/ui/CursorInfo.cpp'; then $(CYGPATH_W) 'src/ui/CursorInfo.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/CursorInfo.cpp'; fi`
	$(am__mv) $(DEPDIR)/CursorInfo.Tpo $(DEPDIR)/CursorInfo.Po
#	source='src/ui/CursorInfo.cpp' object='CursorInfo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CursorInfo.obj `if test -f 'src/ui/CursorInfo.cpp'; then $(CYGPATH_W) 'src/ui/CursorInfo.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/CursorInfo.cpp'; fi`

CursorPool.o: src/ui/CursorPool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CursorPool.o -MD -MP -MF $(DEPDIR)/CursorPool.Tpo -c -o CursorPool.o `test -f 'src/ui/CursorPool.cpp' || echo '$(srcdir)/'`src/ui/CursorPool.cpp
	$(am__mv) $(DEPDIR)/CursorPool.Tpo $(DEPDIR)/CursorPool.Po
#	source='src/ui/CursorPool.cpp' object='CursorPool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CursorPool.o `test -f 'src/ui/CursorPool.cpp' || echo '$(srcdir)/'`src/ui/CursorPool.cpp

CursorPool.obj: src/ui/CursorPool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CursorPool.obj -MD -MP -MF $(DEPDIR)/CursorPool.Tpo -c -o CursorPool.obj `if test -f 'src/ui/CursorPool.cpp'; then $(CYGPATH_W) 'src/ui/CursorPool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/CursorPool.cpp'; fi`
	$(am__mv) $(DEPDIR)/CursorPool.Tpo $(DEPDIR)/CursorPool.Po
#	source='src/ui/CursorPool.cpp' object='CursorPool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CursorPool.obj `if test -f 'src/ui/CursorPool.cpp'; then $(CYGPATH_W) 'src/ui/CursorPool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/CursorPool.cpp'; fi`

DropDownListBox.o: src/ui/DropDownListBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DropDownListBox.o -MD -MP -MF $(DEPDIR)/DropDownListBox.Tpo -c -o DropDownListBox.o `test -f 'src/ui/DropDownListBox.cpp' || echo '$(srcdir)/'`src/ui/DropDownListBox.cpp
	$(am__mv) $(DEPDIR)/DropDownListBox.Tpo $(DEPDIR)/DropDownListBox.Po
#	source='src/ui/DropDownListBox.cpp' object='DropDownListBox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DropDownListBox.o `test -f 'src/ui/DropDownListBox.cpp' || echo '$(srcdir)/'`src/ui/DropDownListBox.cpp

DropDownListBox.obj: src/ui/DropDownListBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DropDownListBox.obj -MD -MP -MF $(DEPDIR)/DropDownListBox.Tpo -c -o DropDownListBox.obj `if test -f 'src/ui/DropDownListBox.cpp'; then $(CYGPATH_W) 'src/ui/DropDownListBox.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/DropDownListBox.cpp'; fi`
	$(am__mv) $(DEPDIR)/DropDownListBox.Tpo $(DEPDIR)/DropDownListBox.Po
#	source='src/ui/DropDownListBox.cpp' object='DropDownListBox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DropDownListBox.obj `if test -f 'src/ui/DropDownListBox.cpp'; then $(CYGPATH_W) 'src/ui/DropDownListBox.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/DropDownListBox.cpp'; fi`

Font.o: src/ui/Font.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Font.o -MD -MP -MF $(DEPDIR)/Font.Tpo -c -o Font.o `test -f 'src/ui/Font.cpp' || echo '$(srcdir)/'`src/ui/Font.cpp
	$(am__mv) $(DEPDIR)/Font.Tpo $(DEPDIR)/Font.Po
#	source='src/ui/Font.cpp' object='Font.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Font.o `test -f 'src/ui/Font.cpp' || echo '$(srcdir)/'`src/ui/Font.cpp

Font.obj: src/ui/Font.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Font.obj -MD -MP -MF $(DEPDIR)/Font.Tpo -c -o Font.obj `if test -f 'src/ui/Font.cpp'; then $(CYGPATH_W) 'src/ui/Font.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Font.cpp'; fi`
	$(am__mv) $(DEPDIR)/Font.Tpo $(DEPDIR)/Font.Po
#	source='src/ui/Font.cpp' object='Font.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Font.obj `if test -f 'src/ui/Font.cpp'; then $(CYGPATH_W) 'src/ui/Font.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Font.cpp'; fi`

FontCache.o: src/ui/FontCache.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FontCache.o -MD -MP -MF $(DEPDIR)/FontCache.Tpo -c -o FontCache.o `test -f 'src/ui/FontCache.cpp' || echo '$(srcdir)/'`src/ui/FontCache.cpp
	$(am__mv) $(DEPDIR)/FontCache.Tpo $(DEPDIR)/FontCache.Po
#	source='src/ui/FontCache.cpp' object='FontCache.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FontCache.o `test -f 'src/ui/FontCache.cpp' || echo '$(srcdir)/'`src/ui/FontCache.cpp

FontCache.obj: src/ui/FontCache.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FontCache.obj -MD -MP -MF $(DEPDIR)/FontCache.Tpo -c -o FontCache.obj `if test -f 'src/ui/FontCache.cpp'; then $(CYGPATH_W) 'src/ui/FontCache.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/FontCache.cpp'; fi`
	$(am__mv) $(DEPDIR)/FontCache.Tpo $(DEPDIR)/FontCache.Po
#	source='src/ui/FontCache.cpp' object='FontCache.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FontCache.obj `if test -f 'src/ui/FontCache.cpp'; then $(CYGPATH_W) 'src/ui/FontCache.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/FontCache.cpp'; fi`

Input.o: src/ui/Input.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Input.o -MD -MP -MF $(DEPDIR)/Input.Tpo -c -o Input.o `test -f 'src/ui/Input.cpp' || echo '$(srcdir)/'`src/ui/Input.cpp
	$(am__mv) $(DEPDIR)/Input.Tpo $(DEPDIR)/Input.Po
#	source='src/ui/Input.cpp' object='Input.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Input.o `test -f 'src/ui/Input.cpp' || echo '$(srcdir)/'`src/ui/Input.cpp

Input.obj: src/ui/Input.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Input.obj -MD -MP -MF $(DEPDIR)/Input.Tpo -c -o Input.obj `if test -f 'src/ui/Input.cpp'; then $(CYGPATH_W) 'src/ui/Input.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Input.cpp'; fi`
	$(am__mv) $(DEPDIR)/Input.Tpo $(DEPDIR)/Input.Po
#	source='src/ui/Input.cpp' object='Input.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Input.obj `if test -f 'src/ui/Input.cpp'; then $(CYGPATH_W) 'src/ui/Input.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Input.cpp'; fi`

ListboxClass.o: src/ui/ListboxClass.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ListboxClass.o -MD -MP -MF $(DEPDIR)/ListboxClass.Tpo -c -o ListboxClass.o `test -f 'src/ui/ListboxClass.cpp' || echo '$(srcdir)/'`src/ui/ListboxClass.cpp
	$(am__mv) $(DEPDIR)/ListboxClass.Tpo $(DEPDIR)/ListboxClass.Po
#	source='src/ui/ListboxClass.cpp' object='ListboxClass.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ListboxClass.o `test -f 'src/ui/ListboxClass.cpp' || echo '$(srcdir)/'`src/ui/ListboxClass.cpp

ListboxClass.obj: src/ui/ListboxClass.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ListboxClass.obj -MD -MP -MF $(DEPDIR)/ListboxClass.Tpo -c -o ListboxClass.obj `if test -f 'src/ui/ListboxClass.cpp'; then $(CYGPATH_W) 'src/ui/ListboxClass.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/ListboxClass.cpp'; fi`
	$(am__mv) $(DEPDIR)/ListboxClass.Tpo $(DEPDIR)/ListboxClass.Po
#	source='src/ui/ListboxClass.cpp' object='ListboxClass.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ListboxClass.obj `if test -f 'src/ui/ListboxClass.cpp'; then $(CYGPATH_W) 'src/ui/ListboxClass.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/ListboxClass.cpp'; fi`

MapAnimationMenu.o: src/ui/MapAnimationMenu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MapAnimationMenu.o -MD -MP -MF $(DEPDIR)/MapAnimationMenu.Tpo -c -o MapAnimationMenu.o `test -f 'src/ui/MapAnimationMenu.cpp' || echo '$(srcdir)/'`src/ui/MapAnimationMenu.cpp
	$(am__mv) $(DEPDIR)/MapAnimationMenu.Tpo $(DEPDIR)/MapAnimationMenu.Po
#	source='src/ui/MapAnimationMenu.cpp' object='MapAnimationMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MapAnimationMenu.o `test -f 'src/ui/MapAnimationMenu.cpp' || echo '$(srcdir)/'`src/ui/MapAnimationMenu.cpp

MapAnimationMenu.obj: src/ui/MapAnimationMenu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MapAnimationMenu.obj -MD -MP -MF $(DEPDIR)/MapAnimationMenu.Tpo -c -o MapAnimationMenu.obj `if test -f 'src/ui/MapAnimationMenu.cpp'; then $(CYGPATH_W) 'src/ui/MapAnimationMenu.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/MapAnimationMenu.cpp'; fi`
	$(am__mv) $(DEPDIR)/MapAnimationMenu.Tpo $(DEPDIR)/MapAnimationMenu.Po
#	source='src/ui/MapAnimationMenu.cpp' object='MapAnimationMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MapAnimationMenu.obj `if test -f 'src/ui/MapAnimationMenu.cpp'; then $(CYGPATH_W) 'src/ui/MapAnimationMenu.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/MapAnimationMenu.cpp'; fi`

Menu.o: src/ui/Menu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Menu.o -MD -MP -MF $(DEPDIR)/Menu.Tpo -c -o Menu.o `test -f 'src/ui/Menu.cpp' || echo '$(srcdir)/'`src/ui/Menu.cpp
	$(am__mv) $(DEPDIR)/Menu.Tpo $(DEPDIR)/Menu.Po
#	source='src/ui/Menu.cpp' object='Menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Menu.o `test -f 'src/ui/Menu.cpp' || echo '$(srcdir)/'`src/ui/Menu.cpp

Menu.obj: src/ui/Menu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Menu.obj -MD -MP -MF $(DEPDIR)/Menu.Tpo -c -o Menu.obj `if test -f 'src/ui/Menu.cpp'; then $(CYGPATH_W) 'src/ui/Menu.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Menu.cpp'; fi`
	$(am__mv) $(DEPDIR)/Menu.Tpo $(DEPDIR)/Menu.Po
#	source='src/ui/Menu.cpp' object='Menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Menu.obj `if test -f 'src/ui/Menu.cpp'; then $(CYGPATH_W) 'src/ui/Menu.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/Menu.cpp'; fi`

PauseMenu.o: src/ui/PauseMenu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PauseMenu.o -MD -MP -MF $(DEPDIR)/PauseMenu.Tpo -c -o PauseMenu.o `test -f 'src/ui/PauseMenu.cpp' || echo '$(srcdir)/'`src/ui/PauseMenu.cpp
	$(am__mv) $(DEPDIR)/PauseMenu.Tpo $(DEPDIR)/PauseMenu.Po
#	source='src/ui/PauseMenu.cpp' object='PauseMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PauseMenu.o `test -f 'src/ui/PauseMenu.cpp' || echo '$(srcdir)/'`src/ui/PauseMenu.cpp

PauseMenu.obj: src/ui/PauseMenu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PauseMenu.obj -MD -MP -MF $(DEPDIR)/PauseMenu.Tpo -c -o PauseMenu.obj `if test -f 'src/ui/PauseMenu.cpp'; then $(CYGPATH_W) 'src/ui/PauseMenu.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/PauseMenu.cpp'; fi`
	$(am__mv) $(DEPDIR)/PauseMenu.Tpo $(DEPDIR)/PauseMenu.Po
#	source='src/ui/PauseMenu.cpp' object='PauseMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PauseMenu.obj `if test -f 'src/ui/PauseMenu.cpp'; then $(CYGPATH_W) 'src/ui/PauseMenu.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/PauseMenu.cpp'; fi`

RaWindow.o: src/ui/RaWindow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RaWindow.o -MD -MP -MF $(DEPDIR)/RaWindow.Tpo -c -o RaWindow.o `test -f 'src/ui/RaWindow.cpp' || echo '$(srcdir)/'`src/ui/RaWindow.cpp
	$(am__mv) $(DEPDIR)/RaWindow.Tpo $(DEPDIR)/RaWindow.Po
#	source='src/ui/RaWindow.cpp' object='RaWindow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RaWindow.o `test -f 'src/ui/RaWindow.cpp' || echo '$(srcdir)/'`src/ui/RaWindow.cpp

RaWindow.obj: src/ui/RaWindow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RaWindow.obj -MD -MP -MF $(DEPDIR)/RaWindow.Tpo -c -o RaWindow.obj `if test -f 'src/ui/RaWindow.cpp'; then $(CYGPATH_W) 'src/ui/RaWindow.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/RaWindow.cpp'; fi`
	$(am__mv) $(DEPDIR)/RaWindow.Tpo $(DEPDIR)/RaWindow.Po
#	source='src/ui/RaWindow.cpp' object='RaWindow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RaWindow.obj `if test -f 'src/ui/RaWindow.cpp'; then $(CYGPATH_W) 'src/ui/RaWindow.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/RaWindow.cpp'; fi`

RA_Label.o: src/ui/RA_Label.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RA_Label.o -MD -MP -MF $(DEPDIR)/RA_Label.Tpo -c -o RA_Label.o `test -f 'src/ui/RA_Label.cpp' || echo '$(srcdir)/'`src/ui/RA_Label.cpp
	$(am__mv) $(DEPDIR)/RA_Label.Tpo $(DEPDIR)/RA_Label.Po
#	source='src/ui/RA_Label.cpp' object='RA_Label.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RA_Label.o `test -f 'src/ui/RA_Label.cpp' || echo '$(srcdir)/'`src/ui/RA_Label.cpp

RA_Label.obj: src/ui/RA_Label.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RA_Label.obj -MD -MP -MF $(DEPDIR)/RA_Label.Tpo -c -o RA_Label.obj `if test -f 'src/ui/RA_Label.cpp'; then $(CYGPATH_W) 'src/ui/RA_Label.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/RA_Label.cpp'; fi`
	$(am__mv) $(DEPDIR)/RA_Label.Tpo $(DEPDIR)/RA_Label.Po
#	source='src/ui/RA_Label.cpp' object='RA_Label.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RA_Label.obj `if test -f 'src/ui/RA_Label.cpp'; then $(CYGPATH_W) 'src/ui/RA_Label.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/RA_Label.cpp'; fi`

RA_ProgressBar.o: src/ui/RA_ProgressBar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RA_ProgressBar.o -MD -MP -MF $(DEPDIR)/RA_ProgressBar.Tpo -c -o RA_ProgressBar.o `test -f 'src/ui/RA_ProgressBar.cpp' || echo '$(srcdir)/'`src/ui/RA_ProgressBar.cpp
	$(am__mv) $(DEPDIR)/RA_ProgressBar.Tpo $(DEPDIR)/RA_ProgressBar.Po
#	source='src/ui/RA_ProgressBar.cpp' object='RA_ProgressBar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RA_ProgressBar.o `test -f 'src/ui/RA_ProgressBar.cpp' || echo '$(srcdir)/'`src/ui/RA_ProgressBar.cpp

RA_ProgressBar.obj: src/ui/RA_ProgressBar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RA_ProgressBar.obj -MD -MP -MF $(DEPDIR)/RA_ProgressBar.Tpo -c -o RA_ProgressBar.obj `if test -f 'src/ui/RA_ProgressBar.cpp'; then $(CYGPATH_W) 'src/ui/RA_ProgressBar.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/RA_ProgressBar.cpp'; fi`
	$(am__mv) $(DEPDIR)/RA_ProgressBar.Tpo $(DEPDIR)/RA_ProgressBar.Po
#	source='src/ui/RA_ProgressBar.cpp' object='RA_ProgressBar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RA_ProgressBar.obj `if test -f 'src/ui/RA_ProgressBar.cpp'; then $(CYGPATH_W) 'src/ui/RA_ProgressBar.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/RA_ProgressBar.cpp'; fi`

selection.o: src/ui/selection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT selection.o -MD -MP -MF $(DEPDIR)/selection.Tpo -c -o selection.o `test -f 'src/ui/selection.cpp' || echo '$(srcdir)/'`src/ui/selection.cpp
	$(am__mv) $(DEPDIR)/selection.Tpo $(DEPDIR)/selection.Po
#	source='src/ui/selection.cpp' object='selection.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o selection.o `test -f 'src/ui/selection.cpp' || echo '$(srcdir)/'`src/ui/selection.cpp

selection.obj: src/ui/selection.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT selection.obj -MD -MP -MF $(DEPDIR)/selection.Tpo -c -o selection.obj `if test -f 'src/ui/selection.cpp'; then $(CYGPATH_W) 'src/ui/selection.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/selection.cpp'; fi`
	$(am__mv) $(DEPDIR)/selection.Tpo $(DEPDIR)/selection.Po
#	source='src/ui/selection.cpp' object='selection.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o selection.obj `if test -f 'src/ui/selection.cpp'; then $(CYGPATH_W) 'src/ui/selection.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/selection.cpp'; fi`

sidebar.o: src/ui/sidebar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sidebar.o -MD -MP -MF $(DEPDIR)/sidebar.Tpo -c -o sidebar.o `test -f 'src/ui/sidebar.cpp' || echo '$(srcdir)/'`src/ui/sidebar.cpp
	$(am__mv) $(DEPDIR)/sidebar.Tpo $(DEPDIR)/sidebar.Po
#	source='src/ui/sidebar.cpp' object='sidebar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sidebar.o `test -f 'src/ui/sidebar.cpp' || echo '$(srcdir)/'`src/ui/sidebar.cpp

sidebar.obj: src/ui/sidebar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sidebar.obj -MD -MP -MF $(DEPDIR)/sidebar.Tpo -c -o sidebar.obj `if test -f 'src/ui/sidebar.cpp'; then $(CYGPATH_W) 'src/ui/sidebar.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/sidebar.cpp'; fi`
	$(am__mv) $(DEPDIR)/sidebar.Tpo $(DEPDIR)/sidebar.Po
#	source='src/ui/sidebar.cpp' object='sidebar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sidebar.obj `if test -f 'src/ui/sidebar.cpp'; then $(CYGPATH_W) 'src/ui/sidebar.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/sidebar.cpp'; fi`

SidebarButton.o: src/ui/SidebarButton.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SidebarButton.o -MD -MP -MF $(DEPDIR)/SidebarButton.Tpo -c -o SidebarButton.o `test -f 'src/ui/SidebarButton.cpp' || echo '$(srcdir)/'`src/ui/SidebarButton.cpp
	$(am__mv) $(DEPDIR)/SidebarButton.Tpo $(DEPDIR)/SidebarButton.Po
#	source='src/ui/SidebarButton.cpp' object='SidebarButton.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SidebarButton.o `test -f 'src/ui/SidebarButton.cpp' || echo '$(srcdir)/'`src/ui/SidebarButton.cpp

SidebarButton.obj: src/ui/SidebarButton.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SidebarButton.obj -MD -MP -MF $(DEPDIR)/SidebarButton.Tpo -c -o SidebarButton.obj `if test -f 'src/ui/SidebarButton.cpp'; then $(CYGPATH_W) 'src/ui/SidebarButton.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/SidebarButton.cpp'; fi`
	$(am__mv) $(DEPDIR)/SidebarButton.Tpo $(DEPDIR)/SidebarButton.Po
#	source='src/ui/SidebarButton.cpp' object='SidebarButton.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SidebarButton.obj `if test -f 'src/ui/SidebarButton.cpp'; then $(CYGPATH_W) 'src/ui/SidebarButton.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/SidebarButton.cpp'; fi`

SidebarError.o: src/ui/SidebarError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SidebarError.o -MD -MP -MF $(DEPDIR)/SidebarError.Tpo -c -o SidebarError.o `test -f 'src/ui/SidebarError.cpp' || echo '$(srcdir)/'`src/ui/SidebarError.cpp
	$(am__mv) $(DEPDIR)/SidebarError.Tpo $(DEPDIR)/SidebarError.Po
#	source='src/ui/SidebarError.cpp' object='SidebarError.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SidebarError.o `test -f 'src/ui/SidebarError.cpp' || echo '$(srcdir)/'`src/ui/SidebarError.cpp

SidebarError.obj: src/ui/SidebarError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SidebarError.obj -MD -MP -MF $(DEPDIR)/SidebarError.Tpo -c -o SidebarError.obj `if test -f 'src/ui/SidebarError.cpp'; then $(CYGPATH_W) 'src/ui/SidebarError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/SidebarError.cpp'; fi`
	$(am__mv) $(DEPDIR)/SidebarError.Tpo $(DEPDIR)/SidebarError.Po
#	source='src/ui/SidebarError.cpp' object='SidebarError.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SidebarError.obj `if test -f 'src/ui/SidebarError.cpp'; then $(CYGPATH_W) 'src/ui/SidebarError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/SidebarError.cpp'; fi`

TCheckBox.o: src/ui/TCheckBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TCheckBox.o -MD -MP -MF $(DEPDIR)/TCheckBox.Tpo -c -o TCheckBox.o `test -f 'src/ui/TCheckBox.cpp' || echo '$(srcdir)/'`src/ui/TCheckBox.cpp
	$(am__mv) $(DEPDIR)/TCheckBox.Tpo $(DEPDIR)/TCheckBox.Po
#	source='src/ui/TCheckBox.cpp' object='TCheckBox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TCheckBox.o `test -f 'src/ui/TCheckBox.cpp' || echo '$(srcdir)/'`src/ui/TCheckBox.cpp

TCheckBox.obj: src/ui/TCheckBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TCheckBox.obj -MD -MP -MF $(DEPDIR)/TCheckBox.Tpo -c -o TCheckBox.obj `if test -f 'src/ui/TCheckBox.cpp'; then $(CYGPATH_W) 'src/ui/TCheckBox.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/TCheckBox.cpp'; fi`
	$(am__mv) $(DEPDIR)/TCheckBox.Tpo $(DEPDIR)/TCheckBox.Po
#	source='src/ui/TCheckBox.cpp' object='TCheckBox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TCheckBox.obj `if test -f 'src/ui/TCheckBox.cpp'; then $(CYGPATH_W) 'src/ui/TCheckBox.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/TCheckBox.cpp'; fi`

TTextBox.o: src/ui/TTextBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TTextBox.o -MD -MP -MF $(DEPDIR)/TTextBox.Tpo -c -o TTextBox.o `test -f 'src/ui/TTextBox.cpp' || echo '$(srcdir)/'`src/ui/TTextBox.cpp
	$(am__mv) $(DEPDIR)/TTextBox.Tpo $(DEPDIR)/TTextBox.Po
#	source='src/ui/TTextBox.cpp' object='TTextBox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TTextBox.o `test -f 'src/ui/TTextBox.cpp' || echo '$(srcdir)/'`src/ui/TTextBox.cpp

TTextBox.obj: src/ui/TTextBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TTextBox.obj -MD -MP -MF $(DEPDIR)/TTextBox.Tpo -c -o TTextBox.obj `if test -f 'src/ui/TTextBox.cpp'; then $(CYGPATH_W) 'src/ui/TTextBox.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/TTextBox.cpp'; fi`
	$(am__mv) $(DEPDIR)/TTextBox.Tpo $(DEPDIR)/TTextBox.Po
#	source='src/ui/TTextBox.cpp' object='TTextBox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TTextBox.obj `if test -f 'src/ui/TTextBox.cpp'; then $(CYGPATH_W) 'src/ui/TTextBox.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ui/TTextBox.cpp'; fi`

externalvfs.o: src/vfs/filesystem/externalvfs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT externalvfs.o -MD -MP -MF $(DEPDIR)/externalvfs.Tpo -c -o externalvfs.o `test -f 'src/vfs/filesystem/externalvfs.cpp' || echo '$(srcdir)/'`src/vfs/filesystem/externalvfs.cpp
	$(am__mv) $(DEPDIR)/externalvfs.Tpo $(DEPDIR)/externalvfs.Po
#	source='src/vfs/filesystem/externalvfs.cpp' object='externalvfs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o externalvfs.o `test -f 'src/vfs/filesystem/externalvfs.cpp' || echo '$(srcdir)/'`src/vfs/filesystem/externalvfs.cpp

externalvfs.obj: src/vfs/filesystem/externalvfs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT externalvfs.obj -MD -MP -MF $(DEPDIR)/externalvfs.Tpo -c -o externalvfs.obj `if test -f 'src/vfs/filesystem/externalvfs.cpp'; then $(CYGPATH_W) 'src/vfs/filesystem/externalvfs.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/filesystem/externalvfs.cpp'; fi`
	$(am__mv) $(DEPDIR)/externalvfs.Tpo $(DEPDIR)/externalvfs.Po
#	source='src/vfs/filesystem/externalvfs.cpp' object='externalvfs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o externalvfs.obj `if test -f 'src/vfs/filesystem/externalvfs.cpp'; then $(CYGPATH_W) 'src/vfs/filesystem/externalvfs.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/filesystem/externalvfs.cpp'; fi`

blowfish.o: src/vfs/mix/blowfish.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT blowfish.o -MD -MP -MF $(DEPDIR)/blowfish.Tpo -c -o blowfish.o `test -f 'src/vfs/mix/blowfish.cpp' || echo '$(srcdir)/'`src/vfs/mix/blowfish.cpp
	$(am__mv) $(DEPDIR)/blowfish.Tpo $(DEPDIR)/blowfish.Po
#	source='src/vfs/mix/blowfish.cpp' object='blowfish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o blowfish.o `test -f 'src/vfs/mix/blowfish.cpp' || echo '$(srcdir)/'`src/vfs/mix/blowfish.cpp

blowfish.obj: src/vfs/mix/blowfish.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT blowfish.obj -MD -MP -MF $(DEPDIR)/blowfish.Tpo -c -o blowfish.obj `if test -f 'src/vfs/mix/blowfish.cpp'; then $(CYGPATH_W) 'src/vfs/mix/blowfish.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/mix/blowfish.cpp'; fi`
	$(am__mv) $(DEPDIR)/blowfish.Tpo $(DEPDIR)/blowfish.Po
#	source='src/vfs/mix/blowfish.cpp' object='blowfish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o blowfish.obj `if test -f 'src/vfs/mix/blowfish.cpp'; then $(CYGPATH_W) 'src/vfs/mix/blowfish.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/mix/blowfish.cpp'; fi`

mixvfs.o: src/vfs/mix/mixvfs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mixvfs.o -MD -MP -MF $(DEPDIR)/mixvfs.Tpo -c -o mixvfs.o `test -f 'src/vfs/mix/mixvfs.cpp' || echo '$(srcdir)/'`src/vfs/mix/mixvfs.cpp
	$(am__mv) $(DEPDIR)/mixvfs.Tpo $(DEPDIR)/mixvfs.Po
#	source='src/vfs/mix/mixvfs.cpp' object='mixvfs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mixvfs.o `test -f 'src/vfs/mix/mixvfs.cpp' || echo '$(srcdir)/'`src/vfs/mix/mixvfs.cpp

mixvfs.obj: src/vfs/mix/mixvfs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mixvfs.obj -MD -MP -MF $(DEPDIR)/mixvfs.Tpo -c -o mixvfs.obj `if test -f 'src/vfs/mix/mixvfs.cpp'; then $(CYGPATH_W) 'src/vfs/mix/mixvfs.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/mix/mixvfs.cpp'; fi`
	$(am__mv) $(DEPDIR)/mixvfs.Tpo $(DEPDIR)/mixvfs.Po
#	source='src/vfs/mix/mixvfs.cpp' object='mixvfs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mixvfs.obj `if test -f 'src/vfs/mix/mixvfs.cpp'; then $(CYGPATH_W) 'src/vfs/mix/mixvfs.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/mix/mixvfs.cpp'; fi`

ws-key.o: src/vfs/mix/ws-key.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ws-key.o -MD -MP -MF $(DEPDIR)/ws-key.Tpo -c -o ws-key.o `test -f 'src/vfs/mix/ws-key.cpp' || echo '$(srcdir)/'`src/vfs/mix/ws-key.cpp
	$(am__mv) $(DEPDIR)/ws-key.Tpo $(DEPDIR)/ws-key.Po
#	source='src/vfs/mix/ws-key.cpp' object='ws-key.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ws-key.o `test -f 'src/vfs/mix/ws-key.cpp' || echo '$(srcdir)/'`src/vfs/mix/ws-key.cpp

ws-key.obj: src/vfs/mix/ws-key.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ws-key.obj -MD -MP -MF $(DEPDIR)/ws-key.Tpo -c -o ws-key.obj `if test -f 'src/vfs/mix/ws-key.cpp'; then $(CYGPATH_W) 'src/vfs/mix/ws-key.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/mix/ws-key.cpp'; fi`
	$(am__mv) $(DEPDIR)/ws-key.Tpo $(DEPDIR)/ws-key.Po
#	source='src/vfs/mix/ws-key.cpp' object='ws-key.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ws-key.obj `if test -f 'src/vfs/mix/ws-key.cpp'; then $(CYGPATH_W) 'src/vfs/mix/ws-key.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/mix/ws-key.cpp'; fi`

VFile.o: src/vfs/VFile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VFile.o -MD -MP -MF $(DEPDIR)/VFile.Tpo -c -o VFile.o `test -f 'src/vfs/VFile.cpp' || echo '$(srcdir)/'`src/vfs/VFile.cpp
	$(am__mv) $(DEPDIR)/VFile.Tpo $(DEPDIR)/VFile.Po
#	source='src/vfs/VFile.cpp' object='VFile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VFile.o `test -f 'src/vfs/VFile.cpp' || echo '$(srcdir)/'`src/vfs/VFile.cpp

VFile.obj: src/vfs/VFile.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VFile.obj -MD -MP -MF $(DEPDIR)/VFile.Tpo -c -o VFile.obj `if test -f 'src/vfs/VFile.cpp'; then $(CYGPATH_W) 'src/vfs/VFile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/VFile.cpp'; fi`
	$(am__mv) $(DEPDIR)/VFile.Tpo $(DEPDIR)/VFile.Po
#	source='src/vfs/VFile.cpp' object='VFile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VFile.obj `if test -f 'src/vfs/VFile.cpp'; then $(CYGPATH_W) 'src/vfs/VFile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/VFile.cpp'; fi`

vfs.o: src/vfs/vfs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vfs.o -MD -MP -MF $(DEPDIR)/vfs.Tpo -c -o vfs.o `test -f 'src/vfs/vfs.cpp' || echo '$(srcdir)/'`src/vfs/vfs.cpp
	$(am__mv) $(DEPDIR)/vfs.Tpo $(DEPDIR)/vfs.Po
#	source='src/vfs/vfs.cpp' object='vfs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vfs.o `test -f 'src/vfs/vfs.cpp' || echo '$(srcdir)/'`src/vfs/vfs.cpp

vfs.obj: src/vfs/vfs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vfs.obj -MD -MP -MF $(DEPDIR)/vfs.Tpo -c -o vfs.obj `if test -f 'src/vfs/vfs.cpp'; then $(CYGPATH_W) 'src/vfs/vfs.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/vfs.cpp'; fi`
	$(am__mv) $(DEPDIR)/vfs.Tpo $(DEPDIR)/vfs.Po
#	source='src/vfs/vfs.cpp' object='vfs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vfs.obj `if test -f 'src/vfs/vfs.cpp'; then $(CYGPATH_W) 'src/vfs/vfs.cpp'; else $(CYGPATH_W) '$(srcdir)/src/vfs/vfs.cpp'; fi`

CPSImage.o: src/video/CPSImage.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CPSImage.o -MD -MP -MF $(DEPDIR)/CPSImage.Tpo -c -o CPSImage.o `test -f 'src/video/CPSImage.cpp' || echo '$(srcdir)/'`src/video/CPSImage.cpp
	$(am__mv) $(DEPDIR)/CPSImage.Tpo $(DEPDIR)/CPSImage.Po
#	source='src/video/CPSImage.cpp' object='CPSImage.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CPSImage.o `test -f 'src/video/CPSImage.cpp' || echo '$(srcdir)/'`src/video/CPSImage.cpp

CPSImage.obj: src/video/CPSImage.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CPSImage.obj -MD -MP -MF $(DEPDIR)/CPSImage.Tpo -c -o CPSImage.obj `if test -f 'src/video/CPSImage.cpp'; then $(CYGPATH_W) 'src/video/CPSImage.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/CPSImage.cpp'; fi`
	$(am__mv) $(DEPDIR)/CPSImage.Tpo $(DEPDIR)/CPSImage.Po
#	source='src/video/CPSImage.cpp' object='CPSImage.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CPSImage.obj `if test -f 'src/video/CPSImage.cpp'; then $(CYGPATH_W) 'src/video/CPSImage.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/CPSImage.cpp'; fi`

Dune2Image.o: src/video/Dune2Image.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dune2Image.o -MD -MP -MF $(DEPDIR)/Dune2Image.Tpo -c -o Dune2Image.o `test -f 'src/video/Dune2Image.cpp' || echo '$(srcdir)/'`src/video/Dune2Image.cpp
	$(am__mv) $(DEPDIR)/Dune2Image.Tpo $(DEPDIR)/Dune2Image.Po
#	source='src/video/Dune2Image.cpp' object='Dune2Image.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dune2Image.o `test -f 'src/video/Dune2Image.cpp' || echo '$(srcdir)/'`src/video/Dune2Image.cpp

Dune2Image.obj: src/video/Dune2Image.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dune2Image.obj -MD -MP -MF $(DEPDIR)/Dune2Image.Tpo -c -o Dune2Image.obj `if test -f 'src/video/Dune2Image.cpp'; then $(CYGPATH_W) 'src/video/Dune2Image.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/Dune2Image.cpp'; fi`
	$(am__mv) $(DEPDIR)/Dune2Image.Tpo $(DEPDIR)/Dune2Image.Po
#	source='src/video/Dune2Image.cpp' object='Dune2Image.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dune2Image.obj `if test -f 'src/video/Dune2Image.cpp'; then $(CYGPATH_W) 'src/video/Dune2Image.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/Dune2Image.cpp'; fi`

GraphicsEngine.o: src/video/GraphicsEngine.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GraphicsEngine.o -MD -MP -MF $(DEPDIR)/GraphicsEngine.Tpo -c -o GraphicsEngine.o `test -f 'src/video/GraphicsEngine.cpp' || echo '$(srcdir)/'`src/video/GraphicsEngine.cpp
	$(am__mv) $(DEPDIR)/GraphicsEngine.Tpo $(DEPDIR)/GraphicsEngine.Po
#	source='src/video/GraphicsEngine.cpp' object='GraphicsEngine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GraphicsEngine.o `test -f 'src/video/GraphicsEngine.cpp' || echo '$(srcdir)/'`src/video/GraphicsEngine.cpp

GraphicsEngine.obj: src/video/GraphicsEngine.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GraphicsEngine.obj -MD -MP -MF $(DEPDIR)/GraphicsEngine.Tpo -c -o GraphicsEngine.obj `if test -f 'src/video/GraphicsEngine.cpp'; then $(CYGPATH_W) 'src/video/GraphicsEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/GraphicsEngine.cpp'; fi`
	$(am__mv) $(DEPDIR)/GraphicsEngine.Tpo $(DEPDIR)/GraphicsEngine.Po
#	source='src/video/GraphicsEngine.cpp' object='GraphicsEngine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GraphicsEngine.obj `if test -f 'src/video/GraphicsEngine.cpp'; then $(CYGPATH_W) 'src/video/GraphicsEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/GraphicsEngine.cpp'; fi`

imagecache.o: src/video/imagecache.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT imagecache.o -MD -MP -MF $(DEPDIR)/imagecache.Tpo -c -o imagecache.o `test -f 'src/video/imagecache.cpp' || echo '$(srcdir)/'`src/video/imagecache.cpp
	$(am__mv) $(DEPDIR)/imagecache.Tpo $(DEPDIR)/imagecache.Po
#	source='src/video/imagecache.cpp' object='imagecache.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o imagecache.o `test -f 'src/video/imagecache.cpp' || echo '$(srcdir)/'`src/video/imagecache.cpp

imagecache.obj: src/video/imagecache.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT imagecache.obj -MD -MP -MF $(DEPDIR)/imagecache.Tpo -c -o imagecache.obj `if test -f 'src/video/imagecache.cpp'; then $(CYGPATH_W) 'src/video/imagecache.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/imagecache.cpp'; fi`
	$(am__mv) $(DEPDIR)/imagecache.Tpo $(DEPDIR)/imagecache.Po
#	source='src/video/imagecache.cpp' object='imagecache.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o imagecache.obj `if test -f 'src/video/imagecache.cpp'; then $(CYGPATH_W) 'src/video/imagecache.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/imagecache.cpp'; fi`

ImageCacheEntry.o: src/video/ImageCacheEntry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ImageCacheEntry.o -MD -MP -MF $(DEPDIR)/ImageCacheEntry.Tpo -c -o ImageCacheEntry.o `test -f 'src/video/ImageCacheEntry.cpp' || echo '$(srcdir)/'`src/video/ImageCacheEntry.cpp
	$(am__mv) $(DEPDIR)/ImageCacheEntry.Tpo $(DEPDIR)/ImageCacheEntry.Po
#	source='src/video/ImageCacheEntry.cpp' object='ImageCacheEntry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ImageCacheEntry.o `test -f 'src/video/ImageCacheEntry.cpp' || echo '$(srcdir)/'`src/video/ImageCacheEntry.cpp

ImageCacheEntry.obj: src/video/ImageCacheEntry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ImageCacheEntry.obj -MD -MP -MF $(DEPDIR)/ImageCacheEntry.Tpo -c -o ImageCacheEntry.obj `if test -f 'src/video/ImageCacheEntry.cpp'; then $(CYGPATH_W) 'src/video/ImageCacheEntry.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/ImageCacheEntry.cpp'; fi`
	$(am__mv) $(DEPDIR)/ImageCacheEntry.Tpo $(DEPDIR)/ImageCacheEntry.Po
#	source='src/video/ImageCacheEntry.cpp' object='ImageCacheEntry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ImageCacheEntry.obj `if test -f 'src/video/ImageCacheEntry.cpp'; then $(CYGPATH_W) 'src/video/ImageCacheEntry.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/ImageCacheEntry.cpp'; fi`

ImageNotFound.o: src/video/ImageNotFound.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ImageNotFound.o -MD -MP -MF $(DEPDIR)/ImageNotFound.Tpo -c -o ImageNotFound.o `test -f 'src/video/ImageNotFound.cpp' || echo '$(srcdir)/'`src/video/ImageNotFound.cpp
	$(am__mv) $(DEPDIR)/ImageNotFound.Tpo $(DEPDIR)/ImageNotFound.Po
#	source='src/video/ImageNotFound.cpp' object='ImageNotFound.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ImageNotFound.o `test -f 'src/video/ImageNotFound.cpp' || echo '$(srcdir)/'`src/video/ImageNotFound.cpp

ImageNotFound.obj: src/video/ImageNotFound.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ImageNotFound.obj -MD -MP -MF $(DEPDIR)/ImageNotFound.Tpo -c -o ImageNotFound.obj `if test -f 'src/video/ImageNotFound.cpp'; then $(CYGPATH_W) 'src/video/ImageNotFound.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/ImageNotFound.cpp'; fi`
	$(am__mv) $(DEPDIR)/ImageNotFound.Tpo $(DEPDIR)/ImageNotFound.Po
#	source='src/video/ImageNotFound.cpp' object='ImageNotFound.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ImageNotFound.obj `if test -f 'src/video/ImageNotFound.cpp'; then $(CYGPATH_W) 'src/video/ImageNotFound.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/ImageNotFound.cpp'; fi`

imageproc.o: src/video/imageproc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT imageproc.o -MD -MP -MF $(DEPDIR)/imageproc.Tpo -c -o imageproc.o `test -f 'src/video/imageproc.cpp' || echo '$(srcdir)/'`src/video/imageproc.cpp
	$(am__mv) $(DEPDIR)/imageproc.Tpo $(DEPDIR)/imageproc.Po
#	source='src/video/imageproc.cpp' object='imageproc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o imageproc.o `test -f 'src/video/imageproc.cpp' || echo '$(srcdir)/'`src/video/imageproc.cpp

imageproc.obj: src/video/imageproc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT imageproc.obj -MD -MP -MF $(DEPDIR)/imageproc.Tpo -c -o imageproc.obj `if test -f 'src/video/imageproc.cpp'; then $(CYGPATH_W) 'src/video/imageproc.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/imageproc.cpp'; fi`
	$(am__mv) $(DEPDIR)/imageproc.Tpo $(DEPDIR)/imageproc.Po
#	source='src/video/imageproc.cpp' object='imageproc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o imageproc.obj `if test -f 'src/video/imageproc.cpp'; then $(CYGPATH_W) 'src/video/imageproc.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/imageproc.cpp'; fi`

loadingscreen.o: src/video/loadingscreen.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT loadingscreen.o -MD -MP -MF $(DEPDIR)/loadingscreen.Tpo -c -o loadingscreen.o `test -f 'src/video/loadingscreen.cpp' || echo '$(srcdir)/'`src/video/loadingscreen.cpp
	$(am__mv) $(DEPDIR)/loadingscreen.Tpo $(DEPDIR)/loadingscreen.Po
#	source='src/video/loadingscreen.cpp' object='loadingscreen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o loadingscreen.o `test -f 'src/video/loadingscreen.cpp' || echo '$(srcdir)/'`src/video/loadingscreen.cpp

loadingscreen.obj: src/video/loadingscreen.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT loadingscreen.obj -MD -MP -MF $(DEPDIR)/loadingscreen.Tpo -c -o loadingscreen.obj `if test -f 'src/video/loadingscreen.cpp'; then $(CYGPATH_W) 'src/video/loadingscreen.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/loadingscreen.cpp'; fi`
	$(am__mv) $(DEPDIR)/loadingscreen.Tpo $(DEPDIR)/loadingscreen.Po
#	source='src/video/loadingscreen.cpp' object='loadingscreen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o loadingscreen.obj `if test -f 'src/video/loadingscreen.cpp'; then $(CYGPATH_W) 'src/video/loadingscreen.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/loadingscreen.cpp'; fi`

message.o: src/video/message.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT message.o -MD -MP -MF $(DEPDIR)/message.Tpo -c -o message.o `test -f 'src/video/message.cpp' || echo '$(srcdir)/'`src/video/message.cpp
	$(am__mv) $(DEPDIR)/message.Tpo $(DEPDIR)/message.Po
#	source='src/video/message.cpp' object='message.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o message.o `test -f 'src/video/message.cpp' || echo '$(srcdir)/'`src/video/message.cpp

message.obj: src/video/message.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT message.obj -MD -MP -MF $(DEPDIR)/message.Tpo -c -o message.obj `if test -f 'src/video/message.cpp'; then $(CYGPATH_W) 'src/video/message.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/message.cpp'; fi`
	$(am__mv) $(DEPDIR)/message.Tpo $(DEPDIR)/message.Po
#	source='src/video/message.cpp' object='message.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o message.obj `if test -f 'src/video/message.cpp'; then $(CYGPATH_W) 'src/video/message.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/message.cpp'; fi`

MessagePool.o: src/video/MessagePool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MessagePool.o -MD -MP -MF $(DEPDIR)/MessagePool.Tpo -c -o MessagePool.o `test -f 'src/video/MessagePool.cpp' || echo '$(srcdir)/'`src/video/MessagePool.cpp
	$(am__mv) $(DEPDIR)/MessagePool.Tpo $(DEPDIR)/MessagePool.Po
#	source='src/video/MessagePool.cpp' object='MessagePool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MessagePool.o `test -f 'src/video/MessagePool.cpp' || echo '$(srcdir)/'`src/video/MessagePool.cpp

MessagePool.obj: src/video/MessagePool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MessagePool.obj -MD -MP -MF $(DEPDIR)/MessagePool.Tpo -c -o MessagePool.obj `if test -f 'src/video/MessagePool.cpp'; then $(CYGPATH_W) 'src/video/MessagePool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/MessagePool.cpp'; fi`
	$(am__mv) $(DEPDIR)/MessagePool.Tpo $(DEPDIR)/MessagePool.Po
#	source='src/video/MessagePool.cpp' object='MessagePool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MessagePool.obj `if test -f 'src/video/MessagePool.cpp'; then $(CYGPATH_W) 'src/video/MessagePool.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/MessagePool.cpp'; fi`

PCXImage.o: src/video/PCXImage.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PCXImage.o -MD -MP -MF $(DEPDIR)/PCXImage.Tpo -c -o PCXImage.o `test -f 'src/video/PCXImage.cpp' || echo '$(srcdir)/'`src/video/PCXImage.cpp
	$(am__mv) $(DEPDIR)/PCXImage.Tpo $(DEPDIR)/PCXImage.Po
#	source='src/video/PCXImage.cpp' object='PCXImage.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PCXImage.o `test -f 'src/video/PCXImage.cpp' || echo '$(srcdir)/'`src/video/PCXImage.cpp

PCXImage.obj: src/video/PCXImage.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PCXImage.obj -MD -MP -MF $(DEPDIR)/PCXImage.Tpo -c -o PCXImage.obj `if test -f 'src/video/PCXImage.cpp'; then $(CYGPATH_W) 'src/video/PCXImage.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/PCXImage.cpp'; fi`
	$(am__mv) $(DEPDIR)/PCXImage.Tpo $(DEPDIR)/PCXImage.Po
#	source='src/video/PCXImage.cpp' object='PCXImage.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PCXImage.obj `if test -f 'src/video/PCXImage.cpp'; then $(CYGPATH_W) 'src/video/PCXImage.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/PCXImage.cpp'; fi`

Renderer.o: src/video/Renderer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Renderer.o -MD -MP -MF $(DEPDIR)/Renderer.Tpo -c -o Renderer.o `test -f 'src/video/Renderer.cpp' || echo '$(srcdir)/'`src/video/Renderer.cpp
	$(am__mv) $(DEPDIR)/Renderer.Tpo $(DEPDIR)/Renderer.Po
#	source='src/video/Renderer.cpp' object='Renderer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Renderer.o `test -f 'src/video/Renderer.cpp' || echo '$(srcdir)/'`src/video/Renderer.cpp

Renderer.obj: src/video/Renderer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Renderer.obj -MD -MP -MF $(DEPDIR)/Renderer.Tpo -c -o Renderer.obj `if test -f 'src/video/Renderer.cpp'; then $(CYGPATH_W) 'src/video/Renderer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/Renderer.cpp'; fi`
	$(am__mv) $(DEPDIR)/Renderer.Tpo $(DEPDIR)/Renderer.Po
#	source='src/video/Renderer.cpp' object='Renderer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Renderer.obj `if test -f 'src/video/Renderer.cpp'; then $(CYGPATH_W) 'src/video/Renderer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/Renderer.cpp'; fi`

sdllayer.o: src/video/sdllayer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sdllayer.o -MD -MP -MF $(DEPDIR)/sdllayer.Tpo -c -o sdllayer.o `test -f 'src/video/sdllayer.cpp' || echo '$(srcdir)/'`src/video/sdllayer.cpp
	$(am__mv) $(DEPDIR)/sdllayer.Tpo $(DEPDIR)/sdllayer.Po
#	source='src/video/sdllayer.cpp' object='sdllayer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sdllayer.o `test -f 'src/video/sdllayer.cpp' || echo '$(srcdir)/'`src/video/sdllayer.cpp

sdllayer.obj: src/video/sdllayer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sdllayer.obj -MD -MP -MF $(DEPDIR)/sdllayer.Tpo -c -o sdllayer.obj `if test -f 'src/video/sdllayer.cpp'; then $(CYGPATH_W) 'src/video/sdllayer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/sdllayer.cpp'; fi`
	$(am__mv) $(DEPDIR)/sdllayer.Tpo $(DEPDIR)/sdllayer.Po
#	source='src/video/sdllayer.cpp' object='sdllayer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sdllayer.obj `if test -f 'src/video/sdllayer.cpp'; then $(CYGPATH_W) 'src/video/sdllayer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/sdllayer.cpp'; fi`

SHPBase.o: src/video/SHPBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SHPBase.o -MD -MP -MF $(DEPDIR)/SHPBase.Tpo -c -o SHPBase.o `test -f 'src/video/SHPBase.cpp' || echo '$(srcdir)/'`src/video/SHPBase.cpp
	$(am__mv) $(DEPDIR)/SHPBase.Tpo $(DEPDIR)/SHPBase.Po
#	source='src/video/SHPBase.cpp' object='SHPBase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SHPBase.o `test -f 'src/video/SHPBase.cpp' || echo '$(srcdir)/'`src/video/SHPBase.cpp

SHPBase.obj: src/video/SHPBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SHPBase.obj -MD -MP -MF $(DEPDIR)/SHPBase.Tpo -c -o SHPBase.obj `if test -f 'src/video/SHPBase.cpp'; then $(CYGPATH_W) 'src/video/SHPBase.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/SHPBase.cpp'; fi`
	$(am__mv) $(DEPDIR)/SHPBase.Tpo $(DEPDIR)/SHPBase.Po
#	source='src/video/SHPBase.cpp' object='SHPBase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SHPBase.obj `if test -f 'src/video/SHPBase.cpp'; then $(CYGPATH_W) 'src/video/SHPBase.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/SHPBase.cpp'; fi`

SHPImage.o: src/video/SHPImage.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SHPImage.o -MD -MP -MF $(DEPDIR)/SHPImage.Tpo -c -o SHPImage.o `test -f 'src/video/SHPImage.cpp' || echo '$(srcdir)/'`src/video/SHPImage.cpp
	$(am__mv) $(DEPDIR)/SHPImage.Tpo $(DEPDIR)/SHPImage.Po
#	source='src/video/SHPImage.cpp' object='SHPImage.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SHPImage.o `test -f 'src/video/SHPImage.cpp' || echo '$(srcdir)/'`src/video/SHPImage.cpp

SHPImage.obj: src/video/SHPImage.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SHPImage.obj -MD -MP -MF $(DEPDIR)/SHPImage.Tpo -c -o SHPImage.obj `if test -f 'src/video/SHPImage.cpp'; then $(CYGPATH_W) 'src/video/SHPImage.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/SHPImage.cpp'; fi`
	$(am__mv) $(DEPDIR)/SHPImage.Tpo $(DEPDIR)/SHPImage.Po
#	source='src/video/SHPImage.cpp' object='SHPImage.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SHPImage.obj `if test -f 'src/video/SHPImage.cpp'; then $(CYGPATH_W) 'src/video/SHPImage.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/SHPImage.cpp'; fi`

TemplateImage.o: src/video/TemplateImage.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TemplateImage.o -MD -MP -MF $(DEPDIR)/TemplateImage.Tpo -c -o TemplateImage.o `test -f 'src/video/TemplateImage.cpp' || echo '$(srcdir)/'`src/video/TemplateImage.cpp
	$(am__mv) $(DEPDIR)/TemplateImage.Tpo $(DEPDIR)/TemplateImage.Po
#	source='src/video/TemplateImage.cpp' object='TemplateImage.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TemplateImage.o `test -f 'src/video/TemplateImage.cpp' || echo '$(srcdir)/'`src/video/TemplateImage.cpp

TemplateImage.obj: src/video/TemplateImage.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TemplateImage.obj -MD -MP -MF $(DEPDIR)/TemplateImage.Tpo -c -o TemplateImage.obj `if test -f 'src/video/TemplateImage.cpp'; then $(CYGPATH_W) 'src/video/TemplateImage.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/TemplateImage.cpp'; fi`
	$(am__mv) $(DEPDIR)/TemplateImage.Tpo $(DEPDIR)/TemplateImage.Po
#	source='src/video/TemplateImage.cpp' object='TemplateImage.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TemplateImage.obj `if test -f 'src/video/TemplateImage.cpp'; then $(CYGPATH_W) 'src/video/TemplateImage.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/TemplateImage.cpp'; fi`

VideoError.o: src/video/VideoError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VideoError.o -MD -MP -MF $(DEPDIR)/VideoError.Tpo -c -o VideoError.o `test -f 'src/video/VideoError.cpp' || echo '$(srcdir)/'`src/video/VideoError.cpp
	$(am__mv) $(DEPDIR)/VideoError.Tpo $(DEPDIR)/VideoError.Po
#	source='src/video/VideoError.cpp' object='VideoError.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VideoError.o `test -f 'src/video/VideoError.cpp' || echo '$(srcdir)/'`src/video/VideoError.cpp

VideoError.obj: src/video/VideoError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VideoError.obj -MD -MP -MF $(DEPDIR)/VideoError.Tpo -c -o VideoError.obj `if test -f 'src/video/VideoError.cpp'; then $(CYGPATH_W) 'src/video/VideoError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/VideoError.cpp'; fi`
	$(am__mv) $(DEPDIR)/VideoError.Tpo $(DEPDIR)/VideoError.Po
#	source='src/video/VideoError.cpp' object='VideoError.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VideoError.obj `if test -f 'src/video/VideoError.cpp'; then $(CYGPATH_W) 'src/video/VideoError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/VideoError.cpp'; fi`

VQAMovie.o: src/video/VQAMovie.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VQAMovie.o -MD -MP -MF $(DEPDIR)/VQAMovie.Tpo -c -o VQAMovie.o `test -f 'src/video/VQAMovie.cpp' || echo '$(srcdir)/'`src/video/VQAMovie.cpp
	$(am__mv) $(DEPDIR)/VQAMovie.Tpo $(DEPDIR)/VQAMovie.Po
#	source='src/video/VQAMovie.cpp' object='VQAMovie.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VQAMovie.o `test -f 'src/video/VQAMovie.cpp' || echo '$(srcdir)/'`src/video/VQAMovie.cpp

VQAMovie.obj: src/video/VQAMovie.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT VQAMovie.obj -MD -MP -MF $(DEPDIR)/VQAMovie.Tpo -c -o VQAMovie.obj `if test -f 'src/video/VQAMovie.cpp'; then $(CYGPATH_W) 'src/video/VQAMovie.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/VQAMovie.cpp'; fi`
	$(am__mv) $(DEPDIR)/VQAMovie.Tpo $(DEPDIR)/VQAMovie.Po
#	source='src/video/VQAMovie.cpp' object='VQAMovie.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o VQAMovie.obj `if test -f 'src/video/VQAMovie.cpp'; then $(CYGPATH_W) 'src/video/VQAMovie.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/VQAMovie.cpp'; fi`

WSAError.o: src/video/WSAError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WSAError.o -MD -MP -MF $(DEPDIR)/WSAError.Tpo -c -o WSAError.o `test -f 'src/video/WSAError.cpp' || echo '$(srcdir)/'`src/video/WSAError.cpp
	$(am__mv) $(DEPDIR)/WSAError.Tpo $(DEPDIR)/WSAError.Po
#	source='src/video/WSAError.cpp' object='WSAError.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WSAError.o `test -f 'src/video/WSAError.cpp' || echo '$(srcdir)/'`src/video/WSAError.cpp

WSAError.obj: src/video/WSAError.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WSAError.obj -MD -MP -MF $(DEPDIR)/WSAError.Tpo -c -o WSAError.obj `if test -f 'src/video/WSAError.cpp'; then $(CYGPATH_W) 'src/video/WSAError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/WSAError.cpp'; fi`
	$(am__mv) $(DEPDIR)/WSAError.Tpo $(DEPDIR)/WSAError.Po
#	source='src/video/WSAError.cpp' object='WSAError.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WSAError.obj `if test -f 'src/video/WSAError.cpp'; then $(CYGPATH_W) 'src/video/WSAError.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/WSAError.cpp'; fi`

WSAMovie.o: src/video/WSAMovie.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WSAMovie.o -MD -MP -MF $(DEPDIR)/WSAMovie.Tpo -c -o WSAMovie.o `test -f 'src/video/WSAMovie.cpp' || echo '$(srcdir)/'`src/video/WSAMovie.cpp
	$(am__mv) $(DEPDIR)/WSAMovie.Tpo $(DEPDIR)/WSAMovie.Po
#	source='src/video/WSAMovie.cpp' object='WSAMovie.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WSAMovie.o `test -f 'src/video/WSAMovie.cpp' || echo '$(srcdir)/'`src/video/WSAMovie.cpp

WSAMovie.obj: src/video/WSAMovie.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WSAMovie.obj -MD -MP -MF $(DEPDIR)/WSAMovie.Tpo -c -o WSAMovie.obj `if test -f 'src/video/WSAMovie.cpp'; then $(CYGPATH_W) 'src/video/WSAMovie.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/WSAMovie.cpp'; fi`
	$(am__mv) $(DEPDIR)/WSAMovie.Tpo $(DEPDIR)/WSAMovie.Po
#	source='src/video/WSAMovie.cpp' object='WSAMovie.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WSAMovie.obj `if test -f 'src/video/WSAMovie.cpp'; then $(CYGPATH_W) 'src/video/WSAMovie.cpp'; else $(CYGPATH_W) '$(srcdir)/src/video/WSAMovie.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	-test -n "$(am__skip_mode_fix)" \
	|| find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r "$(distdir)"
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-lzma: distdir
	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma
	$(am__remove_distdir)

dist-xz: distdir
	tardir=$(distdir) && $(am__tar) | xz -c >$(distdir).tar.xz
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lzma*) \
	  lzma -dc $(distdir).tar.lzma | $(am__untar) ;;\
	*.tar.xz*) \
	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	test -d $(distdir)/_build || exit 0; \
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && am__cwd=`pwd` \
	  && $(am__cd) $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
	  && cd "$$am__cwd" \
	  || exit 1
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@$(am__cd) '$(distuninstallcheck_dir)' \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \
	clean-binPROGRAMS clean-generic ctags dist dist-all dist-bzip2 \
	dist-gzip dist-lzma dist-shar dist-tarZ dist-xz dist-zip \
	distcheck distclean distclean-compile distclean-generic \
	distclean-tags distcleancheck distdir distuninstallcheck dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
